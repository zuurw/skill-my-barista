'use strict';

const expect = require('chai').expect;
const sinon = require('sinon');
const fs = require('fs');

const jsonRead = require('../../lib/utils/json-read');
const oauthWrapper = require('../../lib/utils/oauth-wrapper');
const jsonUtility = require('../../lib/utils/json-utility');
const CONSTANTS = require('../../lib/utils/constants');
const apiWrapper = require('../../lib/api/api-wrapper');
const ispUtil = require('../../lib/utils/isp-utils/isp-utility');
const ispConstants = require('../../lib/utils/isp-utils/isp-constants');

describe('api api-wrapper testing', () => {
    let sandbox;
    let emptyCallback = () => {
    };
    const TEST_PROFILE = 'test';
    const VENDOR_ID = 'vendorId';
    const TEST_ISP_DEFINITION = Object.freeze({
        referenceName: 'test_reference_name',
        type: 'SUBSCRIPTION',
        title: 'test'
    });

    beforeEach(() => {
        sandbox = sinon.sandbox.create();
        sandbox.stub(jsonRead, 'readFile');
        sandbox.stub(jsonRead, 'getProperty');
        sandbox.stub(fs, 'existsSync');
        sandbox.stub(oauthWrapper, 'tokenRefreshAndRead');
        sandbox.stub(jsonUtility, 'getProperty');
        sandbox.stub(ispUtil, 'getVendorIDFromProfile');
    });

    afterEach(() => {
        sandbox.restore();
    });

    describe('# create-skill', () => {
        it('| submit create-skill request correctly', () => {
            const SKILL_MANIFEST = {
                manifest: 'content of skill manifest'
            };

            apiWrapper.callCreateSkill(SKILL_MANIFEST, VENDOR_ID, TEST_PROFILE, false, emptyCallback);

            expect(oauthWrapper.tokenRefreshAndRead.called).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/')).equal(true);
            expect(param.body.manifest).equal('content of skill manifest');
            expect(param.body.vendorId).equal(VENDOR_ID);
        });
    });

    describe('# get-skill', () => {
        it('| will finally make a request to get skill', () => {
            apiWrapper.callGetSkill('skill-id', 'stage', TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id/stages/stage/manifest')).equal(true);
        });
    });

    describe('# handle-get-skill-redirect', () => {
        it('| will finally make a request to get skill', () => {
            apiWrapper.handleGetSkillRedirect('url', TEST_PROFILE, false, emptyCallback);

            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('url')).equal(true);
        });
    });

    describe('# update-skill', () => {
        it ('| will finally make a request to update skill', () => {
            apiWrapper.callUpdateSkill('skill-id', 'stage', {}, null, TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id/stages/stage/manifest')).equal(true);
        });
    });

    describe('# delete-skill', () => {
        it('| will finally make a request to delete skill', () => {
            apiWrapper.callDeleteSkill('skill-id', TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id')).equal(true);
        });
    });

    describe('# get-model', () => {
        it('| will finally make a request to get model', () => {
            apiWrapper.callGetModel('skill-id', 'stage', 'locale', TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id/stages/stage/interactionModel/locales/locale')).equal(true);

        });
    });

    describe('# head-model', () => {
        it('| will finally make a request to head model', () => {
            apiWrapper.callHeadModel('skill-id', 'stage', 'locale', TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id/stages/stage/interactionModel/locales/locale')).equal(true);
        });
    });

    describe('# update-model', () => {
        it('| will finally make a request to update model', () => {
            const MODEL_SCHEMA = {
                interactionModel: 'model content'
            };
            jsonRead.readFile.returns(true);

            apiWrapper.callUpdateModel('skill-id', 'stage', 'locale', MODEL_SCHEMA, 'eTag', TEST_PROFILE, false, emptyCallback);

            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id/stages/stage/interactionModel/locales/locale')).equal(true);
            expect(param.body.interactionModel).equal('model content');
        });
    });

    describe('# get-utterance-data', () => {
        it ('| will make a request to get utterance data with query parameters', () => {

            const QUERY_PARAMS = {
                paramOne: ["value1", "value2"],
                paramTwo: ["value3"]
            };

            apiWrapper.callGetUtteranceData('skill-id', QUERY_PARAMS, TEST_PROFILE, false, emptyCallback);

            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id/history/intentRequests?paramOne=value1&paramOne=value2&paramTwo=value3')).equal(true);
        });
    });
    
    describe('# create-account-linking', () => {
        it('| will finally make a request to create account linking', () => {
            apiWrapper.callCreateAccountLinking('skill-id', 'stage', TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id/stages/stage/accountLinkingClient')).equal(true);
        });
    });

    describe('# get-account-linking', () => {
        it('| will finally make a request to get account linking', () => {
            apiWrapper.callGetAccountLinking('skill-id', 'stage', TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id/stages/stage/accountLinkingClient')).equal(true);
        });
    });

    describe('# delete-account-linking', () => {
        it('| will finally make a request to get account linking', () => {
            apiWrapper.callDeleteAccountLinking('skill-id', 'stage', TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let param = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(param.url.includes('/skills/skill-id/stages/stage/accountLinkingClient')).equal(true);
        });
    });

    describe('# list-vendors', () => {
        it('| will finally make a request to get list of vendors', () => {
            apiWrapper.callListVendor('skill-id', TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });
    });

    describe('# list-skills', () => {
        it('| send list-skills request without nextToken', () => {
            // act
            apiWrapper.callListSkills(123, null, 50, TEST_PROFILE, false, emptyCallback);

            // assert
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equal('GET');
            expect(arg.url.includes('/skills?vendorId=123&maxResults=50')).equal(true);
        });

        it('| send list-skills request with nextToken', () => {
            // act
            apiWrapper.callListSkills(123, 321, 50, TEST_PROFILE, false, emptyCallback);

            // assert
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equal('GET');
            expect(arg.url.includes('/skills?vendorId=123&nextToken=321&maxResults=50')).equal(true);
        });
    });

    describe('# submit-skill', () => {
        it('| will send an submit-skill request', () => {
            apiWrapper.callSubmit('skill-id', TEST_PROFILE, false, emptyCallback);

            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);

            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.url.includes('/skills/skill-id/submit')).equal(true);
        });
    });

    describe('# withdraw-skill', () => {
        it('| will send an withdraw-skill request correctly', () => {
            const WITHDRAW_REASON = 'reason';
            const WITHDRAW_MESSAGE = 'message';
            apiWrapper.callWithdraw('skill-id', WITHDRAW_REASON, WITHDRAW_MESSAGE, TEST_PROFILE, false, emptyCallback);

            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);

            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.url.includes('/skills/skill-id/withdraw')).equal(true);
            expect(arg.body.reason).equal(WITHDRAW_REASON);
            expect(arg.body.message).equal(WITHDRAW_MESSAGE);
        });
    });

    describe('# enable-skill', () => {
        it('| will send an enablement request', () => {
            apiWrapper.callEnableSkill('skill-id', CONSTANTS.SKILL.STAGE.DEVELOPMENT, TEST_PROFILE, false, emptyCallback);

            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);

            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.url.includes('/skills/skill-id/stages/development/enablement')).equal(true);
        });
    });

    describe('# disable-skill', () => {
        it('| will send a delete enablement request', () => {
            apiWrapper.callDisableSkill('skill-id', CONSTANTS.SKILL.STAGE.DEVELOPMENT, TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);

            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equal('DELETE');
            expect(arg.url.includes('/skills/skill-id/stages/development/enablement')).equal(true);
        });
    });

    describe('# get-skill-enablement', () => {
        it('| will retrieve the skill enablement', () => {
            apiWrapper.callGetSkillEnablement('skill-id', CONSTANTS.SKILL.STAGE.DEVELOPMENT, TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);

            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equal('GET');
            expect(arg.url.includes('/skills/skill-id/stages/development/enablement')).equal(true);
        });
    });

    describe('# validate-skill', () => [
        {
            description: '| will send a skill validation request with single locale',
            skillId: 'skill-id',
            locales: 'en-us',
            stage: CONSTANTS.SKILL.STAGE.DEVELOPMENT,
            profile: TEST_PROFILE,
        },
        {
            description: '| will send a skill validation request with multiple locales',
            skillId: 'skill-id',
            locales: 'en-us,en-ca,en-gb     en-in',
            stage: CONSTANTS.SKILL.STAGE.DEVELOPMENT,
            profile: TEST_PROFILE,
        }
    ].forEach((argument) => {
        it (argument.description, () => {
            apiWrapper.callValidateSkill(argument.skillId, argument.locales, argument.stage, TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            let locales = argument.locales.split(/[\s,]+/);
            expect(arg.method).equals('POST');
            expect(arg.url.includes('/skills/skill-id/stages/development/validation')).equal(true);
            expect(arg.json).equal(true);
            expect(arg.body.locales).to.have.lengthOf(locales.length);
            locales.forEach((locale) => {
                expect(arg.body.locales).to.include(locale);
            });
        });
    }));

    describe('# get-validation', () => {
        it ('| will send a get skill validation request', () => {
            apiWrapper.callGetValidation('validation-id', 'skill-id', CONSTANTS.SKILL.STAGE.DEVELOPMENT, TEST_PROFILE, false, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equals('GET');
            expect(arg.url).to.include('/skills/skill-id/stages/development/validations/validation-id');
            expect(arg.json).equal(false);
            expect(arg.body).equal(null);
        });
    });

    describe('# simulate-skill', () => {
        it('| verify the request params are correct with file input', (done) => {
            //set up
            sandbox.stub(fs, 'readFileSync').returns('Simulation Content');

            //act
            apiWrapper.callSimulateSkill('file', null, '12345', 'en-us', TEST_PROFILE, false, done);

            //assert
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equal('POST');
            expect(arg.url.includes('/skills/12345/simulations')).equal(true);
            expect(arg.json).equal(true);
            expect(arg.body.input.content).equal('Simulation Content');
            expect(arg.body.device.locale).equal('en-us');
            done();
        });

        it('| verify the request params are correct with text input', (done) => {
            //act
            apiWrapper.callSimulateSkill(null, 'Simulation Content', '12345', 'en-us', TEST_PROFILE, false, done);

            //assert
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equal('POST');
            expect(arg.url.includes('/skills/12345/simulations')).equal(true);
            expect(arg.json).equal(true);
            expect(arg.body.input.content).equal('Simulation Content');
            expect(arg.body.device.locale).equal('en-us');
            done();
        });
    });

    describe('# get-simulation', () => {
        it('| verify the request params are correct', (done) => {
            //set up
            jsonRead.readFile.returns(true);
            fs.existsSync.returns(true);
            jsonRead.getProperty.returns('vendorId');

            //act
            apiWrapper.callGetSimulation('12345', '67890', done);

            //assert
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equal('GET');
            expect(arg.url.includes('/skills/67890/simulations/12345')).equal(true);
            expect(arg.json).equal(false);
            expect(arg.body).equal(null);
            done();
        });
    });

    describe('# add-private-distribution-account', () => {
        it('| will finally make a request to add private distribution account', () => {
            apiWrapper.callAddPrivateDistributionAccount('skill-id', 'stage', 'account-id', emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });
    });

    describe('# delete-private-distribution-account', () => {
        it('| will finally make a request to delete private distribution account', () => {
            apiWrapper.callDeletePrivateDistributionAccount('skill-id', 'stage', 'account-id', emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });
    });

    describe('# list-private-distribution-accounts', () => {
        it('| will finally make a request to list private distribution accounts', () => {
            apiWrapper.callListPrivateDistributionAccounts('skill-id', 'stage', null, 50, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| will finally make a request to list private distribution accounts with nextToken', () => {
            apiWrapper.callListPrivateDistributionAccounts('skill-id', 'stage', 'nextToken', 50, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });
    });

    describe('# invoke-skill', () => {
        it('| verify the request params are correct with file input', (done) => {
            let requestBody = {
                "session": {
                    "sessionId": "SessionId.e12ea327-6752-4679-bf85-c65692a91c2b",
                    "application": {
                        "applicationId": "amzn1.ask.skill.0c24c87b-434d-43d8-a227-8c7e52a4e819"
                    },
                    "attributes": {},
                    "user": {
                        "userId": "amzn1.ask.account.AEZEGAFXFANE7AAAAAAZFLIBIBNJBL3LWNZHFSW2FO4ESH6YRPHZPQ6DNJ5QI6FPILBWR6UOFHYLCMLJM7K7O5WGTAUM5BGLXUJ7CRICV6B2Q6RH3WXZOBPZVQBUI4YUOWOMJCD3ULJ3J6D4C43OIJDQFANVCXKIPQH4X4CY6XGFQS4C5ADQSIHOQKPKJOU4KHE5ZF32LPI74NQ"
                    },
                    "new": true
                },
                "request": {
                    "type": "IntentRequest",
                    "requestId": "EdwRequestId.ba7aa96c-4ac2-4d6a-85f4-cf8a1f129ffd",
                    "locale": "en-US",
                    "timestamp": "2017-06-15T03:46:55Z",
                    "intent": {
                        "name": "RecipeIntent",
                        "slots": {
                            "Item": {
                                "name": "Item",
                                "value": "map"
                            }
                        }
                    }
                },
                "version": "1.0"
            };

            //set up
            jsonRead.readFile.returns(requestBody);
            fs.existsSync.returns(true);
            jsonRead.getProperty.returns('vendorId');

            //act
            apiWrapper.callInvokeSkill("file", null, '12345', 'NA', TEST_PROFILE, done);

            //assert
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equal('POST');
            expect(arg.url.includes('/skills/12345/invocations')).equal(true);
            expect(arg.json).equal(true);
            expect(arg.body.endpointRegion).equal('NA');
            expect(JSON.stringify(arg.body.skillRequest.body.request) === JSON.stringify(requestBody.request)).equal(true);
            done();
        });

        it('| verify the request params are correct with json object input', (done) => {
            let requestBody = {
                "session": {
                    "sessionId": "SessionId.e12ea327-6752-4679-bf85-c65692a91c2b",
                    "application": {
                        "applicationId": "amzn1.ask.skill.0224c87b-437d-43d8-a227-8c7e52a4e819"
                    },
                    "attributes": {},
                    "user": {
                        "userId": "amzn1.ask.account.AEZEGA6XAANE7TZGKWAZFAAAAAAABL3LWNZHFSW2FO4ESH6YRPHZPQ6DNJ5QI6FPILBWR6UOFHYLCMLJM7K7O5WGTAUM5BGLXUJ7CRICV6B2Q6RH3WXZOBPZVQBUI4YUOWOMJCD3ULJ3J6D4C43OIJDQFANVCXKIPQH4X4CY6XGFQS4C5ADQSIHOQKPKJOU4KHE5ZF32LPI74NQ"
                    },
                    "new": false
                },
                "request": {
                    "type": "IntentRequest",
                    "requestId": "EdwRequestId.ba7aa96c-4ac2-4d6a-85f4-cf8a1f129ffd",
                    "locale": "en-US",
                    "timestamp": "2017-06-15T03:46:55Z",
                    "intent": {
                        "name": "RecipeIntent",
                        "slots": {
                            "Item": {
                                "name": "Item",
                                "value": "map"
                            }
                        }
                    }
                },
                "version": "1.0"
            };

            //set up
            jsonRead.readFile.returns(true);
            fs.existsSync.returns(true);
            jsonRead.getProperty.returns('vendorId');

            //act
            apiWrapper.callInvokeSkill(null, requestBody, '12345', 'EU', TEST_PROFILE, done);

            //assert
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.method).equal('POST');
            expect(arg.url.includes('/skills/12345/invocations')).equal(true);
            expect(arg.json).equal(true);
            expect(arg.body.endpointRegion).equal('EU');
            expect(JSON.stringify(arg.body.skillRequest.body.request) === JSON.stringify(requestBody.request)).equal(true);
            done();
        });
    });
    describe('# get-skill-status', () => {
        it('| make a request to get skill status for both by default with null list', () => {
            apiWrapper.callGetSkillStatus('skill-id', null, 'default', emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.url.includes('/skills/skill-id/status')).equal(true);
        });

        it('| make a request to get skill status for both by default with empty list', () => {
            apiWrapper.callGetSkillStatus('skill-id', [], 'default', emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.url.includes('/skills/skill-id/status')).equal(true);
        });

        it('| make a request to get skill status for both by explicitly setting the flags', () => {
            apiWrapper.callGetSkillStatus('skill-id', [CONSTANTS.SKILL.RESOURCES.MANIFEST, CONSTANTS.SKILL.RESOURCES.INTERACTION_MODEL], 'default', emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.url.includes('/skills/skill-id/status?resource=manifest&resource=interactionModel')).equal(true);
        });

        it('| make a request to get skill status for manifest', () => {
            apiWrapper.callGetSkillStatus('skill-id', [CONSTANTS.SKILL.RESOURCES.MANIFEST], 'default', emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.url.includes('/skills/skill-id/status?resource=manifest')).equal(true);
        });

        it('| make a request to get skill status for model', () => {
            apiWrapper.callGetSkillStatus('skill-id', [CONSTANTS.SKILL.RESOURCES.INTERACTION_MODEL], 'default', emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.url.includes('/skills/skill-id/status?resource=interactionModel')).equal(true);
        });

        it('| make a request to get skill status for model with multiple duplicate item in the list', () => {
            let resourceList = [CONSTANTS.SKILL.RESOURCES.INTERACTION_MODEL,
                CONSTANTS.SKILL.RESOURCES.INTERACTION_MODEL,
                CONSTANTS.SKILL.RESOURCES.INTERACTION_MODEL,
                CONSTANTS.SKILL.RESOURCES.INTERACTION_MODEL,
                CONSTANTS.SKILL.RESOURCES.INTERACTION_MODEL];
            apiWrapper.callGetSkillStatus('skill-id', resourceList, 'default', emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
            let arg = oauthWrapper.tokenRefreshAndRead.getCall(0).args[0];
            expect(arg.url.includes('/skills/skill-id/status?resource=interactionModel')).equal(true);
        });
    });
    /**
     * Tests for ISP commands
     */

    describe('# create-isp', () => {
        it('| make a request to create an in-skill product', () => {
            apiWrapper.callCreateISP(VENDOR_ID, TEST_ISP_DEFINITION, TEST_PROFILE, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| callback with error when vendor id is null', () => {
            fs.existsSync.returns(true);
            apiWrapper.callCreateISP(null, TEST_ISP_DEFINITION, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.CANNOT_GET_VENDOR_ID_FROM_PROFILE]
                }));
            });
        });

        it('| callback with error when the in-skill product definition is empty', () => {
            fs.existsSync.returns(true);
            apiWrapper.callCreateISP(VENDOR_ID, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_DEFINITION]
                }));
            });
        });
    });


    describe('# update-isp', () => {
        it('| make a request to update an in-skill product', () => {
            ispUtil.getVendorIDFromProfile.returns('123');
            apiWrapper.callUpdateISP('100', TEST_ISP_DEFINITION, ispConstants.ISP_STAGE.DEVELOPMENT, TEST_PROFILE, null, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| quit and log error when input ispId is null', () => {
            apiWrapper.callUpdateISP(null, TEST_ISP_DEFINITION, ispConstants.ISP_STAGE.DEVELOPMENT, TEST_PROFILE, null, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_PRODUCT_ID]
                }));
            });
        });

        it('| quit and log error when input ispDefinition is null', () => {
            apiWrapper.callUpdateISP('123', null, ispConstants.ISP_STAGE.DEVELOPMENT, TEST_PROFILE, null, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_DEFINITION]
                }));
            });
        });

        it('| quit and log error when input ISP stage is null', () => {
            sandbox.stub(console, 'error');
            apiWrapper.callUpdateISP('123', TEST_ISP_DEFINITION, null, TEST_PROFILE, null, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_STAGE]
                }));
            });
        });
    });

    describe('# get-isp', () => {
        it('| make a request to get the definition of an in-skill product', () => {
            ispUtil.getVendorIDFromProfile.returns('123');
            apiWrapper.callGetISP('100', ispConstants.ISP_STAGE.DEVELOPMENT, null, TEST_PROFILE, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| make a request to get the summary of an in-skill product', () => {
            ispUtil.getVendorIDFromProfile.returns('123');
            apiWrapper.callGetISP('100', ispConstants.ISP_STAGE.DEVELOPMENT, true, TEST_PROFILE, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| quit and log error when input ispId is null', () => {
            apiWrapper.callGetISP(null, ispConstants.ISP_STAGE.DEVELOPMENT, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_PRODUCT_ID]
                }));
            });
        });

        it('| quit and log error when input ISP stage is null', () => {
            apiWrapper.callGetISP('123', null, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_STAGE]
                }));
            });
        });
    });

    describe('# associate-isp', () => {
        it('| make a request to associate an in-skill product to a skill', () => {
            ispUtil.getVendorIDFromProfile.returns('123');
            apiWrapper.callAssociateISP('100', 'skillId', TEST_PROFILE, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| quit and log error when input ispId is null', () => {
            apiWrapper.callAssociateISP(null, 'skillId', TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_PRODUCT_ID]
                }));
            });
        });

        it('| quit and log error when input skillId is null', () => {
            sandbox.stub(console, 'error');
            apiWrapper.callAssociateISP('ispId', null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_SKILL_ID]
                }));
            });
        });
    });

    describe('# disassociate-isp', () => {
        it('| make a request to disassociate in-skill product', () => {
            ispUtil.getVendorIDFromProfile.returns('123');
            apiWrapper.callDisassociateISP('100', 'skillId', TEST_PROFILE, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| quit and log error when input ispId is null', () => {
            apiWrapper.callDisassociateISP(null, 'skillId', TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_PRODUCT_ID]
                }));
            });
        });

        it('| quit and log error when input skillId is null', () => {
            apiWrapper.callDisassociateISP('ispId', null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_SKILL_ID]
                }));
            });
        });
    });

    describe('# list-skills-for-isp', () => {
        it('| make a request to list associated skills', () => {
            ispUtil.getVendorIDFromProfile.returns('123');
            apiWrapper.callListSkillsForISP('100', ispConstants.ISP_STAGE.DEVELOPMENT, null, null, TEST_PROFILE, null, emptyCallback);
        });

        it('| quit and log error when input ispId is null', () => {
            apiWrapper.callListSkillsForISP(null, ispConstants.ISP_STAGE.DEVELOPMENT, null, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_PRODUCT_ID]
                }));
            });
        });

        it('| quit and log error when input ISP stage is null', () => {
            apiWrapper.callListSkillsForISP('123', null, null, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_STAGE]
                }));
            });
        });
    });

    describe('# delete-isp', () => {
        it('| make a request to delete an in-skill product', () => {
            ispUtil.getVendorIDFromProfile.returns('123');
            apiWrapper.callDeleteISP('ispId', ispConstants.ISP_STAGE.DEVELOPMENT, null, TEST_PROFILE, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| quit and log error when input ispId is null', () => {
            apiWrapper.callDeleteISP(null, ispConstants.ISP_STAGE.DEVELOPMENT, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_PRODUCT_ID]
                }));
            });
        });

        it('| quit and log error when input ISP stage is null', () => {
            apiWrapper.callDeleteISP('123', null, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_STAGE]
                }));
            });
        });
    });

    describe('# list-isp-for-skill', () => {
        it('| make a request to list in-skill products associated with a skill', () => {
            ispUtil.getVendorIDFromProfile.returns('123');
            apiWrapper.callListISPForSkill('100', ispConstants.ISP_STAGE.DEVELOPMENT, null, null, TEST_PROFILE, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| quit and log error when input skillId is null', () => {
            apiWrapper.callListISPForSkill(null, ispConstants.ISP_STAGE.DEVELOPMENT, null, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_SKILL_ID]
                }));
            });
        });

        it('| quit and log error when input ISP stage is null', () => {
            apiWrapper.callListISPForSkill('123', null, null, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_STAGE]
                }));
            });
        });

    });

    describe('# list-isp-for-vendor', () => {
        it('| make a request to list in-skill products for vendor', () => {
            apiWrapper.callListISPForVendor('123', null, null, null, null, null, null, null, null, TEST_PROFILE, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| quit and log error when input vendorId is null', () => {
            apiWrapper.callListISPForVendor('123', null, null, null, null, null, null, null, null, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_VENDOR_ID]
                }));
            });
        });
    });

    describe('# reset-isp-entitlement', () => {
        it('| make a request to reset an in-skill product entitlement', () => {
            apiWrapper.callResetISPEntitlement('123', ispConstants.ISP_STAGE.DEVELOPMENT, TEST_PROFILE, null, emptyCallback);
            expect(oauthWrapper.tokenRefreshAndRead.calledOnce).equal(true);
        });

        it('| quit and log error if the in-skill product id is null', () => {
            sandbox.stub(console, 'error');
            apiWrapper.callResetISPEntitlement(null, ispConstants.ISP_STAGE.DEVELOPMENT, TEST_PROFILE, null, (error) => {
                expect(ispUtil.getFormattedErrorString(error)).equal(ispUtil.getFormattedErrorString({
                    message: ispConstants.ERROR.INVALID_API_PARAMETERS,
                    violations: [ispConstants.ERROR.MISSING_ISP_PRODUCT_ID]
                }));
            });
        });
    });
});

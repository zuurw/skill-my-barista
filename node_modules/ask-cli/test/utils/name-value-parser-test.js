'use strict';

const expect = require('chai').expect;
const nameValueParser = require('../../lib/utils/name-value-parser');

describe('name-value-parser testing', () => {

    describe('# parseNameValuePairsStringAsObject', () => {
        it ('| will return empty for null', () => {
            let nameValuePairsString = null;

            let parsedObject = nameValueParser.parseNameValuePairsStringAsObject(nameValuePairsString);

            expect(parsedObject).to.deep.equal({});
        });

        it ('| will return empty for empty', () => {
            let nameValuePairsString = '';

            let parsedObject = nameValueParser.parseNameValuePairsStringAsObject(nameValuePairsString);

            expect(parsedObject).to.deep.equal({});
        });

        it ('| will return a good object', () => {
            let nameValuePairsString = "Name=myField, Values= myValue1,myValue2 ;Name = otherField, Value =myValue3";
            let expectedObject = {
                myField: ['myValue1', 'myValue2'],
                otherField: ['myValue3']
            };

            let parsedObject = nameValueParser.parseNameValuePairsStringAsObject(nameValuePairsString);

            expect(parsedObject).to.deep.equal(expectedObject);
        });

        it ('| will append a duplicated name', () => {
            let nameValuePairsString = "Name=myField, Values= myValue1 ;Name = otherField, Value =myValue3; Name =myField ,Value=myValue2";
            let expectedObject = {
                myField: ['myValue1', 'myValue2'],
                otherField: ['myValue3']
            };

            let parsedObject = nameValueParser.parseNameValuePairsStringAsObject(nameValuePairsString);

            expect(parsedObject).to.deep.equal(expectedObject);
        });

        it ('| will throw on an invalid name/value pair', () => {
            let nameValuePairsString = "Name=myField, Values= myValue1,myValue2 ;Key = otherField, Value =myValue3";

            expect(() => nameValueParser.parseNameValuePairsStringAsObject(nameValuePairsString)).to.throw();
        });

        it ('| will throw on a delimiter-and-whitespace-only value', () => {
            let nameValuePairsString = "Name=myField, Values= myValue1,myValue2 ;Name = otherField, Value =, ,";

            expect(() => nameValueParser.parseNameValuePairsStringAsObject(nameValuePairsString)).to.throw();
        });
    });
});
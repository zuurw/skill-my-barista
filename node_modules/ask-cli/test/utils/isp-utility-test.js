'use strict';

const expect = require('chai').expect;
const sinon = require('sinon');
const fs = require('fs');
const path = require('path');
const ispConstants = require('../../lib/utils/isp-utils/isp-constants');
const ispUtil = require('../../lib/utils/isp-utils/isp-utility');

describe('utils isp-utility testing', () => {
    beforeEach(() => {
        sinon.stub(console, 'error');
        sinon.stub(console, 'warn');
    });

    afterEach(() => {
        console.error.restore();
        console.warn.restore();
    });

    describe('test isISPFileValid', () => {
        let sandbox;
        beforeEach(() => {
            sandbox = sinon.sandbox.create();
            sandbox.stub(fs, 'existsSync');

        });

        afterEach(() => {
            sandbox.restore();
        });

        it('| callback with error if the given file path is null', () => {
            fs.existsSync.returns(false);
            ispUtil.isISPFileValid(null, (error) => {
               expect(error).equals(ispConstants.ERROR.MISSING_ISP_FILE);
            });
        });

        it('| callback with error if the given file path does not exit', () => {
            fs.existsSync.returns(false);
            ispUtil.isISPFileValid('.test/isp.json', (error) => {
               expect(error).equals(ispConstants.ERROR.MISSING_ISP_FILE);
            });
        });
    });

    describe('test isISPTypeValid', () => {
        it('| callback without any error if the given in-skill product type is valid', () => {
            ispUtil.isISPTypeValid(ispConstants.ISP_PRODUCT_TYPE.ENTITLEMENT, false, (error) => {
               expect(!error).equals(true);
            });
            ispUtil.isISPTypeValid(ispConstants.ISP_PRODUCT_TYPE.SUBSCRIPTION, false, (error) => {
                expect(!error).equals(true);
            });
            ispUtil.isISPTypeValid(ispConstants.ISP_PRODUCT_TYPE.CONSUMABLE, false, (error) => {
                expect(!error).equals(true);
            });
        });

        it('| callback without any error if the given in-skill product type is null but it is optional', () => {
            ispUtil.isISPTypeValid(null, true, (error) => {
                expect(!error).equals(true);
            });
        });

        it('| return false and log error if the given in-skill product type is null', () => {
            ispUtil.isISPTypeValid(null, null, (error) => {
                expect(error).equals(ispConstants.ERROR.MISSING_ISP_TYPE);
            });
        });

        it('| return false and log error if the given in-skill product type is invalid', () => {
            ispUtil.isISPTypeValid('invalidType', null, (error) => {
                expect(error).equals(ispConstants.ERROR.INVALID_ISP_TYPE);
            });

        });
    });

    describe('test isISPConfigValid', () => {
        let validISPConfig;
        let invalidISPConfig;

        before(() => {
            validISPConfig = {
                productId: '123',
                filePath: './isp/entitlement/test.json'
            };
            invalidISPConfig = {
                productId: '123',
            };
        });

        it('| return true if the ISP config object is valid', () => {
            expect(ispUtil.isISPConfigValid(validISPConfig)).equal(true);
        });
        it('| return false if the ISP config object is invalid', () => {
            expect(ispUtil.isISPConfigValid(invalidISPConfig)).equal(false);
        });
    });

    describe('test getISPFileName', () => {
        let validFileName = 'test.json';
        let validFileNameWithSubfix = 'test_1.json';
        it('| return file name without subfix', () => {
            expect(ispUtil.getISPFileName('test')).equal(validFileName);
        });
        it('| return file name with subfix', () => {
            expect(ispUtil.getISPFileName('test', 1)).equal(validFileNameWithSubfix);
        });
    });

    describe('test isISPApi', () => {
        it('| return true if the given api name is ISP api', () => {
            expect(ispUtil.isISPApi(ispConstants.API.CREATE_ISP)).equal(true);
        });
    });

    describe('test handleAPIResponse', () => {
        it('| callback with response and etag when status is success', () => {
            let response = {
                statusCode: 200,
                body: '{"results": "results"}',
                headers: {
                    etag: 'etag'
                }
            };
            ispUtil.handleAPIResponse(ispConstants.API.CREATE_ISP, response, (error, responseBody, eTag) => {
                expect(error).equal(null);
                expect(responseBody.results).equal('results');
                expect(eTag).equal('etag');
            });
        });

        it('| callback with error when status >= 300', () => {
            let response = {
                statusCode: 404,
                body: '{"message": "Result not found."}',
                headers: {
                    etag: 'etag'
                }
            };
            ispUtil.handleAPIResponse(ispConstants.API.CREATE_ISP, response, (error) => {
                expect(error).equal(error);
            });
        });
    });

    describe('test getISPRootPath', () => {
        it('| return the in-skill product directory', () => {
            let skillProjectPath = 'skill';
            let ispRootPath = path.join(skillProjectPath, 'isps');
            expect(ispUtil.getISPRootPath(skillProjectPath)).equal(ispRootPath);
        });
    });

    describe('test getConfigPath', () => {
        it('| return the skill config path', () => {
            let skillProjectPath = 'skill';
            let configPath = path.join(skillProjectPath, '.ask', 'config');
            expect(ispUtil.getConfigPath(skillProjectPath)).equal(configPath);
        });
    });

    describe('test isISPNameValid', () => {
        it('| return true if the name is valid', () => {
           let ispName = 'testISP';
           expect(ispUtil.isISPNameValid(ispName)).equal(true);
        });
        it('| return false if the length of name is less than the minimum length', () =>{
            let ispName = 'te';
            expect(ispUtil.isISPNameValid(ispName)).equal(false);
        });
        it('| return false if the length of name is greater than the maximum length', () =>{
            let ispName = 'looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongISPName';
            expect(ispUtil.isISPNameValid(ispName)).equal(false);
        });
        it('| return false if the length is valid but the content is invalid', () =>{
            let ispName = "@#!@#testISPName";
            expect(ispUtil.isISPNameValid(ispName)).equal(false);
        });
    });
});

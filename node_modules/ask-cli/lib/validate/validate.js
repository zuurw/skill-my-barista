'use strict';

const apiWrapper = require('../api/api-wrapper.js');
const jsonUtility = require('../utils/json-utility');
const profileHelper = require('../utils/profile-helper');
const tools = require('../utils/tools');
const CONSTANTS = require('../utils/constants');
const path = require('path');
const fs = require('fs');
const Spinner = require('cli-spinner').Spinner;
const POLLING_INTERVAL = 1000;

// Public
module.exports = {
    createCommand: (commander) => {
        commander
            .command('validate')
            .usage('[<-l|--locales <locales>>] [-g|--stage <stage>] [-s|--skill-id <skill-id>] [-p|--profile <profile>] [--debug]')
            .description('(Beta) validate a skill')
            .option('-l, --locales <locales>', 'a list of locales for the skill to validate')
            .option('-g, --stage <stage>', 'the skill stage to validate')
            .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
            .option('-p, --profile <profile>', 'ask cli profile')
            .option('--debug', 'ask cli debug mode')
            .action(handle);

        function handle(options) {
            let skillId = options.skillId;

            if (!options.locales && !process.env.ASK_DEFAULT_DEVICE_LOCALE) {
                console.warn('Please specify locale to validate for your skill via command line parameter <-l|--locales> or environment variable - ASK_DEFAULT_DEVICE_LOCALE');
                return;
            }

            let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
            let profile = profileHelper.runtimeProfile(options.profile);
            let locales = options.locales || process.env.ASK_DEFAULT_DEVICE_LOCALE;
            let dataCallback = function(data) {
                let response = tools.convertDataToJsonObject(data);
                if (response) {
                    console.log(JSON.stringify(response, null, 2));
                }
            };

            if (!skillId) {
                let projectConfigFile = path.join(process.cwd(), '.ask', 'config');
                if (!fs.existsSync(projectConfigFile)) {
                    console.warn('Failed to validate. ' +
                        'Please run this command under the root of the skill project or explictly specify the skill id via skill-id option ');
                    return;
                } else {
                    let askConfig = jsonUtility.read(projectConfigFile);
                    skillId = jsonUtility.getPropertyValueFromObject(askConfig, ['deploy_settings', profile, 'skill_id']);
                    if (!skillId) {
                        console.warn('Failed to validate. ' +
                        'The skill that you are trying to validate has not been created or cloned. ' +
                        'If this is a new skill, please try creating and deploying the skill in your project first. ' +
                        'If this is an existing skill, please try cloning the skill in your project first. ' +
                        'Or you can try expliclty specifying the skill id via skill-id option.');
                        return;
                    }
                }
            }

            let listenSpinner = new Spinner({text: 'Waiting for validation response', stream: process.stderr});
            listenSpinner.setSpinnerString(process.platform !== 'darwin' ? '|/-\\' : '◜◠◝◞◡◟');

            apiWrapper.callValidateSkill(skillId, options.locales, stage, profile, options.debug, (data) => {
                let response = tools.convertDataToJsonObject(data.body);
                if (response) {
                    let validationId = response.id;
                    console.error('✓ Validation created for validation id: ' + validationId);
                    listenSpinner.start();

                    let pollValidationResult = (responseBody) => {
                        let response = tools.convertDataToJsonObject(responseBody);
                        if (response) {
                            if (!response.hasOwnProperty('status')) {
                                listenSpinner.stop();
                                console.error('𐄂 Unable to get skill validation result for validation id: ' + validationId);
                            } else if (response.status === CONSTANTS.SKILL.VALIDATION_STATUS.IN_PROGRESS) {
                                setTimeout(() => {
                                    apiWrapper.callGetValidation(validationId, skillId, stage, profile, options.debug, (data) => {
                                        pollValidationResult(data.body);
                                    });
                                }, POLLING_INTERVAL);
                            } else if (response.status === CONSTANTS.SKILL.VALIDATION_STATUS.SUCCESS 
                                || response.status === CONSTANTS.SKILL.VALIDATION_STATUS.FAILURE) {
                                listenSpinner.stop();
                                dataCallback(responseBody);
                            } else {
                                listenSpinner.stop();
                                console.error('x [Error]: Invalid response for skill validation');
                            }
                        }
                    };
                    pollValidationResult(data.body);
                }
            });
        }
    }
};

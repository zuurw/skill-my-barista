'use strict';

const oauthWrapper = require('../utils/oauth-wrapper');
const request = require('request');
const logger = require('../utils/logger-utility');
const tools = require('../utils/tools');
const ispUtil = require('../utils/isp-utils/isp-utility');

/**
 * Wrapper for SMAPI request.
 * Use oauthWrapper to refresh token when necessary before each request.
 * @param apiName   name for the API
 * @param general   general contains url and method
 * @param headers   headers for the request
 * @param payload   payload for the request
 * @param profile   user profile
 * @param doDebug   ASK CLI debug mode
 * @param callback  callback with response when request is successful; kill the process if it fails
 */
module.exports.request = (apiName, general, headers, payload, profile, doDebug, callback) => {
    const ENDPOINT = 'https://api.amazonalexa.com/v1';

    let url = ENDPOINT + general.url;

    module.exports.requestWithUrl(apiName, url, general.method, headers, payload, profile, doDebug, callback);
};

// request with URL directly
module.exports.requestWithUrl = (apiName, url, method, headers, payload, profile, doDebug, callback) => {
    headers['User-Agent'] = 'ask-cli/' + require('../../package.json').version + ' Node/' + process.version;
    let params = {
        url: url,
        method: method,
        headers: headers,
        body: payload,
        json: payload ? true : false
    };

    oauthWrapper.tokenRefreshAndRead(params, profile, (updatedParams) => {
        request(updatedParams, (error, response) => {
            if (error || response === null || response.statusCode === null) {
                console.error('Request to the Alexa Skill Management API service failed.');
                if (doDebug) {
                    logger.getInstance().debug(error);
                }
                process.exit(1);
            } else if (ispUtil.isISPApi(apiName)) {
                if (doDebug) {
                    logger.getInstance().debug(debugContentForResponse(apiName, response));
                }
                callback(apiName, response);
            } else if (response.statusCode >= 300) {
                if (doDebug) {
                    logger.getInstance().debug(debugContentForResponse(apiName, response));
                }
                if ((apiName === 'head-model' && response.statusCode === 404) || 
                    (apiName === 'get-skill-status' && response.statusCode === 404) || 
                    (apiName === 'get-skill' && response.statusCode === 303) ||
                    (response.statusCode === 412)) {
                    callback(response);
                } else {
                    // no callback
                    console.error('Call ' + apiName + ' error.');
                    console.error('Error code: ' + response.statusCode);
                    if (response.body && tools.convertDataToJsonObject(response.body)) {
                        console.error(JSON.stringify(tools.convertDataToJsonObject(response.body), null, 2));
                    }
                    process.exit(1);
                }
            } else {
                if (doDebug) {
                    logger.getInstance().debug(debugContentForResponse(apiName, response));
                }
                callback(response);
            }
        });
    });
};

/*
 * Form the debug info object according to the response from each request
 * Based on the best practice of what should be logged for each request,
 * returned object which includes following field:
 *   - request id
 *   - request headers
 *   - response headers
 *
 * @params apiName
 * @params dataBody
 * @return debug content for response
 */
function debugContentForResponse(apiName, response) {
    return {
        'activity': apiName,
        'request-id': response.headers['x-amzn-requestid'],
        'request': {
            'method': response.request.method,
            'url': response.request.href,
            'headers': response.request.headers,
            'body': response.request.body
        },
        'response': {
            'statusCode': response.statusCode,
            'statusMessage': response.statusMessage,
            'headers': response.headers
        },
        'body': response.body
    };
}

'use strict';

const async = require('async');
const apiWrapper = require('./api-wrapper');
const profileHelper = require('../utils/profile-helper');
const jsonUtility = require('../utils/json-utility');
const ispUtility = require('../utils/isp-utils/isp-utility');
const ispConstants = require('../utils/isp-utils/isp-constants');

//public
module.exports = {
    getISPListForSkill: getISPListForSkill,
    createCommand: (commander) => {
        buildCreateISPCommand(commander);
        buildUpdateISPCommand(commander);
        buildAssociateISPCommand(commander);
        buildDisassociateISPCommand(commander);
        buildGetISPCommand(commander);
        buildListISPForVendorCommand(commander);
        buildListISPForSkillCommand(commander);
        buildListSkillsForISPCommand(commander);
        buildResetISPEntitlementCommand(commander);
        buildDeleteISPCommand(commander);
    }
};

// Private
/**
 * Build 'create-isp' command
 * @param commander commander configuration
 */
function buildCreateISPCommand(commander) {
    commander
        .command(ispConstants.API.CREATE_ISP)
        .usage('<-f|--file <file-path>> [-p|--profile <profile>] [--debug]')
        .description('create an in-skill product')
        .option('-f, --file <file-path>', 'path for in-skill product definition file')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);

        if (!options.file) {
            console.error(ispUtility.getFormattedErrorString(ispConstants.ERROR.MISSING_ISP_FILE));
            return;
        }
        /*
         * Load the json file ahead since jsonUtility.read can terminate if there is any exception
         */
        let ispDefinition = jsonUtility.read(options.file);
        let vendorId = ispUtility.getVendorIDFromProfile(profile);
        apiWrapper.callCreateISP(vendorId, ispDefinition, profile, options.debug, (error, responseBody) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_CREATE_ISP);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }

            if (!responseBody || !responseBody.productId) {
                console.error(ispConstants.ERROR.FAILED_TO_CREATE_ISP);
                console.error(ispUtility.getFormattedErrorString('Cannot get product ID from the response'));
                return;
            }
            console.log('Succeeded to create in-skill product: ' + responseBody.productId + ' based on file: ' + options.file);
        });
    }
}

/**
 * Build 'update-isp' command
 * @param commander commander configuration
 */
function buildUpdateISPCommand(commander) {
    commander
        .command(ispConstants.API.UPDATE_ISP)
        .usage('<-i|--isp-id <isp-id>> <-f|--file <fileName>> [-p|--profile <profile>] [-g|--stage <stage>] [-e|--etag <ETag>] [--debug]')
        .description('update an in-skill product, only development stage supported')
        .option('-i, --isp-id <isp-id>', 'product id for the in-skill product')
        .option('-f, --file <file-path>', 'path for in-skill product definition')
        .option('-g, --stage <stage>', 'stage for the in-skill product, only development stage supported.')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('-e, --etag <ETag>', 'ETag')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.file) {
            console.error(ispUtility.getFormattedErrorString(ispConstants.ERROR.MISSING_ISP_FILE));
            return;
        }

        let ispDefinition = jsonUtility.read(options.file);
        let profile = profileHelper.runtimeProfile(options.profile);
        let stage = options.stage || ispConstants.ISP_STAGE.DEVELOPMENT;
        apiWrapper.callUpdateISP(options.ispId, ispDefinition, stage, profile, options.etag, options.debug, (error) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_UPDATE_ISP);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }
            console.log('Succeeded to update in-skill product ' + options.ispId);
        });
    }
}

/**
 * Build 'get-isp' command
 * @param commander commander configuration
 */
function buildGetISPCommand(commander) {
    commander
        .command(ispConstants.API.GET_ISP)
        .usage('<-i|--isp-id <isp-id>> <-g|--stage <stage> [--summary] [-p|--profile <profile>] [--debug]')
        .description('get the definition or summary for an in-skill product')
        .option('-i, --isp-id <isp-id>', 'product id for the in-skill product')
        .option('-g, --stage <stage>', 'stage for the in-skill product')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--summary', 'return in-skill product summary instead')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);

        apiWrapper.callGetISP(options.ispId, options.stage, options.summary, profile, options.debug, (error, responseBody, eTag) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_GET_ISP_INFO);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }

            if (responseBody) {
                console.warn('ETag: ' + eTag);
                console.log('\n' + JSON.stringify((options.summary ? responseBody.inSkillProductSummary : responseBody.inSkillProductDefinition), null, 2) + '\n');
            }
        });

    }
}

/**
 * Build 'associate-isp' command
 * @param commander commander configuration
 */
function buildAssociateISPCommand(commander) {
    commander
        .command(ispConstants.API.ASSOCIATE_ISP)
        .usage('<-i|--isp-id <isp-id>> <-s|--skill-id <skill-id>> [-p|--profile <profile>] [--debug]')
        .description('associate an in-skill product with a skill. Only development stage supported')
        .option('-i, --isp-id <isp-id>', 'product id for the in-skill product')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callAssociateISP(options.ispId, options.skillId, profile, options.debug, (error) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_ASSOCIATE_ISP_TO_SKILL);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }

            console.log('Succeeded to associate in-skill product: ' + options.ispId + ' to skill ' + options.skillId);
        });
    }
}

/**
 * Build 'disassociate-isp' command
 * @param commander commander configuration
 */
function buildDisassociateISPCommand(commander) {
    commander
        .command(ispConstants.API.DISASSOCIATE_ISP)
        .usage('<-i|--isp-id <isp-id>> <-s|--skill-id <skill-id>> [-p|--profile <profile>] [--debug]')
        .description('disassociate an in-skill product from a skill')
        .option('-i, --isp-id <isp-id>', 'product id for the in-skill product')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);

        apiWrapper.callDisassociateISP(options.ispId, options.skillId, profile, options.debug, (error) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_DISASSOCIATE_ISP_FROM_SKILL);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }

            console.log('Succeeded to disassociate in-skill product: ' + options.ispId + ' from skill ' + options.skillId);
        });
    }
}

/**
 * Build 'list-skills-for-isp' command
 * @param commander commander configuration
 */
function buildListSkillsForISPCommand(commander) {
    commander
        .command(ispConstants.API.LIST_SKILLS_FOR_ISP)
        .usage('<-i|--isp-id <isp-id>> <-g|--stage <stage> [-p|--profile <profile>] [--debug]')
        .description('list skills that are associated with an in-skill product.')
        .option('-i, --isp-id <isp-id>', 'product id for the in-skill product')
        .option('-g, --stage <stage>', 'stage for the in-skill product')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);

        getSkillListForISP(options.ispId, options.stage, profile, options.debug, (error, associatedSkillIdList) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_GET_SKILL_LIST_FOR_ISP);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }
            if (associatedSkillIdList) {
                console.log('List of associated skills:\n' + JSON.stringify(associatedSkillIdList, null, 2));
            }
        });
    }
}

/**
 * Async wrapper to fetch list of Skills for given In-skill Product async, default to fetch 50 results for each API call
 * @param ispId the in-skill product ID
 * @param stage stage of the in-skill product
 * @param profile user profile
 * @param doDebug debug mode
 * @param callback callback function from the command
 */
function getSkillListForISP(ispId, stage, profile, doDebug, callback) {
    let nextToken;
    let associatedSkillIdList = [];

    async.doWhilst(
        (loopCallback) => {
            apiWrapper.callListSkillsForISP(ispId, stage, ispConstants.NUMBERS.DEFAULT_ISP_MAX_RESULTS, nextToken, profile, doDebug, (error, responseBody) => {
                if (error) {
                    callback(error);
                    return;
                }
                if (!responseBody) {
                    callback(null, associatedSkillIdList);
                    return;
                }
                nextToken = responseBody.nextToken;
                associatedSkillIdList = associatedSkillIdList.concat(responseBody.associatedSkillIds);
                loopCallback(null, associatedSkillIdList);
            });
        },
        () => {
            return nextToken;
        },
        (error, associatedSkillIdList) => {
            if (error) {
                callback(error);
                return;
            }
            callback(null, associatedSkillIdList);
        }
    );
}

/**
 * Build 'delete-isp' command
 * @param commander commander configuration
 */
function buildDeleteISPCommand(commander) {
    commander
        .command(ispConstants.API.DELETE_ISP)
        .usage('<-i|--isp-id <isp-id>> [-p|--profile <profile>] [-g|--stage <stage>] [-e|--etag <ETag>] [--debug]')
        .description('delete an in-skill product. Only development stage is supported.')
        .option('-i, --isp-id <isp-id>', 'product id for the in-skill product')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('-g, --stage <stage>', 'stage for the in-skill product. Default is development stage.')
        .option('-e, --etag <ETag>', 'ETag')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);
        let stage = options.stage || ispConstants.ISP_STAGE.DEVELOPMENT;
        apiWrapper.callDeleteISP(options.ispId, stage, options.etag, profile, options.debug, (error) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_DELETE_ISP);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }
            console.log('Succeeded to delete in-skill product ' + options.ispId);
        });
    }
}

/**
 * Build 'list-isp-for-skill' command
 * @param commander commander configuration
 */
function buildListISPForSkillCommand(commander) {
    commander
        .command(ispConstants.API.LIST_ISP_FOR_SKILL)
        .usage('<-s|--skill-id <skill-id>> <-g|--stage <stage> [-p|--profile <profile>] [--debug]')
        .description('list in-skill products that are associated with a skill.')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the in-skill product')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);

        getISPListForSkill(options.skillId, options.stage, profile, options.debug, (error, inSkillProductSummaryList) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_GET_ISP_LIST_FOR_SKILL);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }

            console.log(JSON.stringify(inSkillProductSummaryList, null, 2));
        });
    }
}

/**
 * Async wrapper to fetch list of ISPs for skill async, default to fetch 50 results for each API call
 * @param skillId skill ID
 * @param stage stage of the in-skill product
 * @param profile user profile
 * @param doDebug debug mode
 * @param callback callback function from the command
 */
function getISPListForSkill(skillId, stage, profile, doDebug, callback) {
    let nextToken;
    let inSkillProductSummaryList = [];

    async.doWhilst(
        (loopCallback) => {
            apiWrapper.callListISPForSkill(skillId, stage, ispConstants.NUMBERS.DEFAULT_ISP_MAX_RESULTS, nextToken, profile, doDebug, (error, responseBody) => {
                if (error) {
                    callback(error);
                    return;
                }
                if (!responseBody) {
                    callback(null, inSkillProductSummaryList);
                    return;
                }
                nextToken = responseBody.nextToken;
                inSkillProductSummaryList = inSkillProductSummaryList.concat(responseBody.inSkillProductSummaryList);
                loopCallback(null, inSkillProductSummaryList);
            });
        },
        () => {
            return nextToken;
        },
        (error, inSkillProductSummaryList) => {
            if (error) {
                callback(error);
                return;
            }
            callback(null, inSkillProductSummaryList);
        }
    );
}

/**
 * Build 'list-isp' command
 * @param commander commander configuration
 */
function buildListISPForVendorCommand(commander) {
    commander
        .command(ispConstants.API.LIST_ISP_FOR_VENDOR)
        .usage('<--vendor-id <vendorId>> [-p|--profile <profile>] [-r|--reference-name <referenceName>] [-i|--isp-id-list <ispIdList>] ' +
            '[-t|--type <type>] [-g|--stage <stage>] [-u|--status <status>] [--isAssociatedWithSkill <isAssociatedWithSkill>] ' +
            '[--max-items <maxItems>] [--starting-token <startingToken>] [--debug]')
        .description('query the in-skill products for the a vendor.')
        .option('--vendor-id <vendorId>', 'vendor id of the in-skill product')
        .option('-r, --reference-name <referenceName>', 'reference name for the in-skill product')
        .option('-i, --isp-id-list <ispIdList>', 'the list of in-skill product IDs to get the summary for. Please note that this option must not be used with \'--starting-token\' and/or \'--max-items\' options.',
            (input) => input.split(',').map((item) => item.trim()))
        .option('-t, --type <type>', 'type for the in-skill product')
        .option('-g, --stage <stage>', 'stage for the in-skill product')
        .option('-u, --status <status>', 'status for the in-skill product')
        .option('--isAssociatedWithSkill <isAssociatedWithSkill>', 'whether or not the in-skill products are associated to a skill.')
        .option('--max-items <maxItems>', 'the total number of items to return in the command\'s output. Input should be a positive number')
        .option('--starting-token <startingToken>', 'the token to specify where to start paginating. This is the next-token from a previously truncated response.')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);
        if ((options.maxItems || options.startingToken) && (options.ispIdList && options.ispIdList.length > 0)) {
            console.error(ispUtility.getFormattedErrorString('Cannot use \'--isp-id-list\' option with \'--starting-token\' and/or \'--max-items\' options'));
            return;
        }

        if (options.maxItems) {
            options.maxItems = parseInt(options.maxItems);
            if(!options.maxItems || options.maxItems <= 0) {
                console.error(ispUtility.getFormattedErrorString('Input of \'--max-items\' should be a positive number.'));
                return;
            }
        }

        getISPListForVendor(options.vendorId, options.ispIdList, options.referenceName, options.type, options.stage, options.status, options.isAssociatedWithSkill, options.maxItems, options.startingToken, profile, options.debug, (error, responseBody) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_GET_ISP_LIST_FOR_VENDOR);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }

            console.log(JSON.stringify(responseBody, null, 2));
        });
    }
}

/**
 * Async wrapper to fetch list of in-skill products for vendor async, default to fetch 50 results for each API call
 * @param vendorId  vendor ID
 * @param ispIdList list of in-skill product Ids
 * @param referenceName the reference name of the in-skill products
 * @param type product type
 * @param stage ISP stage
 * @param status ISP status
 * @param isAssociatedWithSkill is the in-skill product associated with skill
 * @param maxItems the total number of items to return
 * @param startingToken the starting token that is used to get the next page of in-skill products results
 * @param profile user profile
 * @param doDebug debug mode
 * @param callback callback function from command
 */
function getISPListForVendor(vendorId, ispIdList, referenceName, type, stage, status, isAssociatedWithSkill, maxItems, startingToken, profile, doDebug, callback) {
    let results = {};
    results.inSkillProductSummaryList = [];
    let nextToken = startingToken;
    let nextSize = getNextSize(maxItems, results.inSkillProductSummaryList.length);
    if (!nextSize) {
        callback(null, results);
        return;
    }
    async.doWhilst(
        (loopCallback) => {
            apiWrapper.callListISPForVendor(vendorId, ispIdList, referenceName, type, stage, status, isAssociatedWithSkill, nextSize, nextToken, profile, doDebug, (error, responseBody) => {
                if (error) {
                    callback(error);
                    return;
                }
                nextToken = responseBody.nextToken;

                /**
                 * return if the response doesn't contain any isp
                 */
                if (!responseBody || !responseBody.inSkillProductSummaryList || responseBody.inSkillProductSummaryList.length === 0) {
                    callback(null, results);
                    return;
                }

                results.inSkillProductSummaryList.push.apply(results.inSkillProductSummaryList, responseBody.inSkillProductSummaryList);

                if (maxItems && results.inSkillProductSummaryList.length >= maxItems) {
                    if (nextToken) {
                        results.nextToken = nextToken;
                    }
                    callback(null, results);
                    return;
                }
                nextSize = getNextSize(maxItems, results.inSkillProductSummaryList.length);

                loopCallback(null, results);
            });
        },
        () => {
            return nextToken;
        },
        (error, results) => {
            if (error) {
                callback(error);
                return;
            }
            callback(null, results);
        }
    );
}

/**
 * Get the next size for auto pagination
 * @param maxItems the maximum number of the returned items
 * @param count the count of the returned items
 * @returns {number} number of items to be retrieved in the next iteration
 */
function getNextSize(maxItems, count) {
    if (!maxItems) {
        return ispConstants.NUMBERS.DEFAULT_ISP_MAX_RESULTS;
    }
    let nextSize = maxItems - count;
    if (nextSize <= 0) {
        return 0;
    } else if (nextSize >= ispConstants.NUMBERS.DEFAULT_ISP_MAX_RESULTS) {
        return ispConstants.NUMBERS.DEFAULT_ISP_MAX_RESULTS;
    } else {
        return nextSize;
    }
}

/**
 * Build 'reset-isp-entitlement' command
 * @param commander commander configuration
 */
function buildResetISPEntitlementCommand(commander) {
    commander
        .command(ispConstants.API.RESET_ISP_ENTITLEMENT)
        .usage('<-i|--isp-id <isp-id>> [-g|--stage <stage>] [-p|--profile <profile>] [--debug]')
        .description('reset an in-skill product entitlement. Only development stage is allowed')
        .option('-i, --isp-id <isp-id>', 'product id for the in-skill product')
        .option('-g, --stage <stage>', 'stage for the in-skill product. Only development stage is allowed')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);
        let stage = options.stage || ispConstants.ISP_STAGE.DEVELOPMENT;
        apiWrapper.callResetISPEntitlement(options.ispId, stage, profile, options.debug, (error) => {
            if (error) {
                console.error(ispConstants.ERROR.FAILED_TO_RESET_ISP_ENTITLEMENT);
                console.error(ispUtility.getFormattedErrorString(error));
                return;
            }
            console.log('Succeeded to reset the entitlement of in-skill product ' + options.ispId);
        });
    }
}
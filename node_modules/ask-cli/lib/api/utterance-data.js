'use strict';

const apiWrapper = require('./api-wrapper');
const tools = require('../utils/tools');
const profileHelper = require('../utils/profile-helper');
const parseNameValuePairsStringAsObject = require('../utils/name-value-parser').parseNameValuePairsStringAsObject;
const errorMessages = require('../utils/error-messages');

const PASSTHROUGH_OPTIONS = [
    "maxResults",
    "sortDirection",
    "sortField",
    "nextToken"
];

// Public
module.exports = {
    createCommand: (commander) => {
        buildGetUtteranceData(commander);
    }
};

// Private
function buildGetUtteranceData(commander) {
    commander
        .command('intent-requests-history')
        .usage('<-s|--skill-id <skill-id>> [--filters <filters>] [--max-results <max-results>] [--sort-direction <sort-direction>] [--sort-field <sort-field>] [--next-token <next-token>] [-p|--profile <profile>] [--debug]')
        .description('get utterance transcripts for a skill')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('--filters <filters>', 'string of semicolon-delimited filters in the format "Name=[field],Values=[value1][,value2...]".')
        .option('--max-results <max-results>', 'maximum number of results to display')
        .option('--sort-direction <sort-direction>', 'order to sort results')
        .option('--sort-field <sort-field>', 'field by which to sort results')
        .option('--next-token <next-token>', 'token to retrieve next page of results')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }

        let queryParameters;
        try {
            queryParameters = parseNameValuePairsStringAsObject(options.filters);
        } catch (error) {
            console.error(errorMessages.api.utteranceData.unableToParseFilters);
            console.error(error.message);
            return;
        }

        PASSTHROUGH_OPTIONS.forEach(optionName => {
            if (options[optionName]) {
                queryParameters[optionName] = options[optionName];
            }
        });

        let profile = profileHelper.runtimeProfile(options.profile);

        apiWrapper.callGetUtteranceData(options.skillId, queryParameters, profile, options.debug, (data) => {
            let response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log(JSON.stringify(response, null, 2));
            }
        });
    }
}
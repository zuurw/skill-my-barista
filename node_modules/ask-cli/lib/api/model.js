'use strict';

const apiWrapper = require('./api-wrapper');
const tools = require('../utils/tools');
const fs = require('fs');
const profileHelper = require('../utils/profile-helper');
const jsonUtility = require('../utils/json-utility');
const CONSTANTS = require('../utils/constants');

// Public
module.exports = {
    createCommand: (commander) => {
        buildGetModelCommand(commander);
        buildHeadModelCommand(commander);
        buildUpdateModelCommand(commander);
    }
};

// Private
function buildGetModelCommand(commander) {
    commander
        .command('get-model')
        .usage('<-s|--skill-id <skill-id>> [-g|--stage <stage>] <-l|--locale <locale>> [-p|--profile <profile>] [--debug]')
        .description('get an interaction model for skill')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill')
        .option('-l, --locale <locale>', 'model locale for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
        if (!options.locale) {
            console.warn('Please input required parameter: locale.');
            return;
        }
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callGetModel(options.skillId, stage, regulateLocale(options.locale), profile, options.debug, (data) => {
            let response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.warn('ETag: ' + data.headers.etag); // Pass Etag to stderr
                console.warn('Model:');
                console.log(JSON.stringify(response, null, 2));
            }
        });
    }
}

function buildHeadModelCommand(commander) {
    commander
        .command('head-model')
        .usage('<-s|--skill-id <skill-id>> [-g|--stage <stage>] <-l|--locale <locale>> [-p|--profile <profile>] [--debug]')
        .description('get the ETag associated with an interaction model')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill')
        .option('-l, --locale <locale>', 'model locale for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
        if (!options.locale) {
            console.warn('Please input required parameter: locale.');
            return;
        }
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callHeadModel(options.skillId, stage, regulateLocale(options.locale), profile, options.debug, (data) => {
            if (data.statusCode === 404) {
                console.log('Model for ' + options.locale + ' not found.');
                return;
            }
            console.log('ETag: ' + data.headers.etag);
        });
    }
}

function buildUpdateModelCommand(commander) {
    commander
        .command('update-model')
        .usage('<-s|--skill-id <skill-id>> [-g|--stage <stage>] <-l|--locale <locale>> <-f|--file <file-path>> [-e|--etag <eTag>] [-p|--profile <profile>] [--debug]')
        .description('create/update the new interaction model for skill')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill')
        .option('-l, --locale <locale>', 'model locale for the skill')
        .option('-f, --file <file-path>', 'path for model schema')
        .option('-e, --etag <eTag>', 'eTag for model')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
        if (!options.locale) {
            console.warn('Please input required parameter: locale.');
            return;
        }
        if (!options.file) {
            console.warn('Please input required parameter: file.');
            return;
        }
        if (!fs.existsSync(options.file)) {
            console.warn("Please verify model schema is in current working directory.");
            return;
        }
        let regulatedLocale = regulateLocale(options.locale);
        let profile = profileHelper.runtimeProfile(options.profile);
        let modelSchema = jsonUtility.read(options.file);

        apiWrapper.callUpdateModel(options.skillId, stage, regulatedLocale, modelSchema, options.etag, profile, options.debug, () => {
            console.log('Model for ' + regulatedLocale + ' submitted.');
            console.log('Please use the following command to track the model build status:' +
                '\n    ask api get-skill-status -s ' + options.skillId);
        });
    }
}

function regulateLocale(locale) {
    let dashIndex = locale.indexOf('-');
    let left = locale.substr(0, dashIndex).toLowerCase();
    let right = locale.substr(dashIndex + 1).toUpperCase();
    return left + '-' + right;
}

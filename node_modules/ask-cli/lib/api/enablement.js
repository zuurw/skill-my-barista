'use strict';

const apiWrapper = require('./api-wrapper');
const profileHelper = require('../utils/profile-helper');
const CONSTANTS = require('../utils/constants');

// Public
module.exports = {
    createCommand: (commander) => {
        buildEnableSkillCommand(commander);
        buildDisableSkillCommand(commander);
        buildGetSkillEnablementCommand(commander);
    }
};

// TODO add the v0 and v1 switch. since enablement will only be available on V1

function buildEnableSkillCommand(commander) {
    commander
        .command('enable-skill')
        .usage('<-s|--skill-id <skill-id>> [-g|--stage <stage>] [-p|--profile <profile>] [--debug]')
        .description('enable a skill')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callEnableSkill(options.skillId, stage, profile, options.debug, () => {
            console.log('The skill has been enabled.');
        });
    }
}

function buildDisableSkillCommand(commander) {
    commander
        .command('disable-skill')
        .usage('<-s|--skill-id <skill-id>> [-g|--stage <stage>] [-p|--profile <profile>] [--debug]')
        .description('disable a skill')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callDisableSkill(options.skillId, stage, profile, options.debug, () => {
            console.log('The skill has been disabled.');
        });
    }
}

function buildGetSkillEnablementCommand(commander) {
    commander
        .command('get-skill-enablement')
        .usage('<-s|--skill-id <skill-id>> [-g|--stage <stage>] [-p|--profile <profile>] [--debug]')
        .description('get enablement information for a skill')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }

        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callGetSkillEnablement(options.skillId, stage, profile, options.debug, () => {
            console.log('The skill has been enabled.');
        });
    }
}

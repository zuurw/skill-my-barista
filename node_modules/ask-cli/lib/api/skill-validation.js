'use strict';

const apiWrapper = require('./api-wrapper');
const tools = require('../utils/tools');
const fs = require('fs');
const profileHelper = require('../utils/profile-helper');
const jsonRead = require('../utils/json-read.js');
const Spinner = require('cli-spinner').Spinner;
const CONSTANTS = require('../utils/constants');

// Public
module.exports = {
    createCommand: (commander) => {
        buildValidateSkillCommand(commander);
        buildGetValidationCommand(commander);
    }
};

//Private
function buildGetValidationCommand(commander) {
    commander
        .command('get-validation')
        .usage('<-i|--validation-id <validation-id>> <-s|--skill-id <skill-id>> [-g|--stage <stage>] [-p|--profile <profile>] [--debug]')
        .description('(Beta) get skill validation result')
        .option('-i, --validation-id <validation-id>', 'validation-id for the validation')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.validationId) {
            console.warn('Please input required parameter: validation-id');
            return;
        }

        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id');
            return;
        }

        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;

        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callGetValidation(options.validationId, options.skillId, stage, profile, options.debug, (data) => {
            let response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log(JSON.stringify(response, null, 2));
            }
        });
    }
}

// Private
function buildValidateSkillCommand(commander) {
    commander
        .command('validate-skill')
        .usage('<-s|--skill-id <skill-id>> [<-g|--stage <stage>] [-l|--locale <locale>] [-p|--profile <profile>] [--debug]')
        .description('(Beta) validate a skill')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-l, --locales <locales>', 'a list of locales for executing skill validations')
        .option('-g, --stage <stage>', 'stage for skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id');
            return;
        }

        if (!options.locales && !process.env.ASK_DEFAULT_DEVICE_LOCALE) {
            console.warn('Please specify locale via command line parameter <-l|--locales> or environment variable - ASK_DEFAULT_DEVICE_LOCALE');
            return;
        }

        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
        let profile = profileHelper.runtimeProfile(options.profile);
        let locale = options.locales || process.env.ASK_DEFAULT_DEVICE_LOCALE;

        apiWrapper.callValidateSkill(options.skillId, locale, stage, profile, options.debug, (data) => {
            let response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log(JSON.stringify(response, null, 2));
            }
        });
    }
}

'use strict';

const apiWrapper = require('./api-wrapper');
const tools = require('../utils/tools');
const profileHelper = require('../utils/profile-helper');
const async = require('async');
const CONSTANTS = require('../utils/constants');

// Public
module.exports = {
    createCommand: (commander) => {
        buildAddPrivateDistributionAccountCommand(commander);
        buildDeletePrivateDistributionAccountCommand(commander);
        buildListPrivateDistributionAccountsCommand(commander);
    }
};

function buildAddPrivateDistributionAccountCommand(commander) {
    commander
        .command('add-private-distribution-account')
        .usage('<-s|--skill-id <skillId>> <--stage <stage>> <--account-id <id>> [-p|--profile <profile>] [--debug]')
        .description('grant access to a private skill for the account')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill, only live is allowed.')
        .option('--account-id <account-id>', 'id for the account')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        if (!options.stage) {
            console.warn('Please input required parameter: stage.');
            return;
        }
        if (!options.accountId) {
            console.warn('Please input required parameter: account-id.');
            return;
        }
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callAddPrivateDistributionAccount(options.skillId, options.stage, options.accountId, profile, options.debug, () => {
            console.log('Private distribution account added successfully.');
        });
    }
}

function buildDeletePrivateDistributionAccountCommand(commander) {
    commander
        .command('delete-private-distribution-account')
        .usage('<-s|--skill-id <skillId>> <--stage <stage>> <--account-id <id>> [-p|--profile <profile>] [--debug]')
        .description('revoke the access to a private skill from an account')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill, only live is allowed.')
        .option('--account-id <account-id>', 'id for the account')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        if (!options.stage) {
            console.warn('Please input required parameter: stage.');
            return;
        }
        if (!options.accountId) {
            console.warn('Please input required parameter: account-id.');
            return;
        }
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callDeletePrivateDistributionAccount(options.skillId, options.stage, options.accountId, profile, options.debug, () => {
            console.log('Private distribution account deleted successfully.');
        });
    }
}
 
function buildListPrivateDistributionAccountsCommand(commander) {
    commander
        .command('list-private-distribution-accounts')
        .usage('<-s|--skill-id <skillId>> <--stage <stage>> [-p|--profile <profile>] [--debug]')
        .description('list all accounts that the skill has been privately distributed to')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill, only live is allowed.')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        if (!options.stage) {
            console.warn('Please input required parameter: stage.');
            return;
        }
        let profile = profileHelper.runtimeProfile(options.profile);
        getPrivateDistributionAccountList(options.skillId, options.stage, profile, options.debug, (response) => {
            console.log(JSON.stringify(response, null, 2));
        });
    }
}

// Private
function getPrivateDistributionAccountList(skillId, stage, profile, doDebug, callback) {
    let nextToken;
    let result = {};
    result.accounts = [];
    async.doWhilst(
        (loopCallback) => {
            apiWrapper.callListPrivateDistributionAccounts(skillId, stage, nextToken, 50, profile, doDebug, (data) => {
                let response = tools.convertDataToJsonObject(data.body);
                nextToken = response.nextToken;
                result.accounts = result.accounts.concat(response.privateDistributionAccounts);
                loopCallback(null, result);
            });
        },
        () => {
            return nextToken;
        },
        (err, result) => {
            if (err) {
                console.error(err);
                process.exit(1);
            }
            callback(result);
        }
    );
}

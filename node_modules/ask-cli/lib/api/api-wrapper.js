'use strict';

const fs = require('fs');
const querystring = require('querystring');

const jsonRead = require('../utils/json-read');
const requestWrapper = require('./request-wrapper');
const ispConstants = require('../utils/isp-utils/isp-constants');
const ispUtil = require('../utils/isp-utils/isp-utility');

/*
 * List of Alexa Skill Management API Service Calls.
 * These functions are thin wrappers for Alexa Skill Management APIs.
 */

module.exports = {
    // simulation
    callSimulateSkill: callSimulateSkill,
    callGetSimulation: callGetSimulation,
    callInvokeSkill: callInvokeSkill,
    // validation
    callValidateSkill: callValidateSkill,
    callGetValidation: callGetValidation,
    // skill
    callCreateSkill: callCreateSkill,
    callGetSkill: callGetSkill,
    handleGetSkillRedirect: handleGetSkillRedirect,
    callUpdateSkill: callUpdateSkill,
    callDeleteSkill: callDeleteSkill,
    callGetSkillStatus: callGetSkillStatus,
    callListSkills: callListSkills,
    // model
    callGetModel: callGetModel,
    callHeadModel: callHeadModel,
    callUpdateModel: callUpdateModel,
    // utterance transcripts
    callGetUtteranceData: callGetUtteranceData,
    // account linking
    callCreateAccountLinking: callCreateAccountLinking,
    callGetAccountLinking: callGetAccountLinking,
    callDeleteAccountLinking: callDeleteAccountLinking,
    // misc
    callListVendor: callListVendor,
    callSubmit: callSubmit,
    callWithdraw: callWithdraw,
    callEnableSkill: callEnableSkill,
    callDisableSkill: callDisableSkill,
    callGetSkillEnablement: callGetSkillEnablement,
    // private skill
    callAddPrivateDistributionAccount: callAddPrivateDistributionAccount,
    callDeletePrivateDistributionAccount: callDeletePrivateDistributionAccount,
    callListPrivateDistributionAccounts: callListPrivateDistributionAccounts,
    // ISP
    callCreateISP: callCreateISP,
    callUpdateISP: callUpdateISP,
    callAssociateISP: callAssociateISP,
    callDisassociateISP: callDisassociateISP,
    callGetISP: callGetISP,
    callListISPForSkill: callListISPForSkill,
    callListISPForVendor: callListISPForVendor,
    callListSkillsForISP: callListSkillsForISP,
    callDeleteISP: callDeleteISP,
    callResetISPEntitlement: callResetISPEntitlement
};

function callValidateSkill(skillId, locales, stage, profile, doDebug, callback) {
    // comma or space deliminater regex
    let splitRegex = /[\s,]+/;

    locales = locales.split(splitRegex);
    let payload = {
        'locales': locales
    };

    let general = {
        url: '/skills/' + skillId + '/stages/' + stage + '/validations',
        method: 'POST'
    };
    let headers = {};
    requestWrapper.request('validate-skill', general, headers, payload, profile, doDebug, callback);
}

function callGetValidation(validationId, skillId, stage, profile, doDebug, callback) {
    let general = {
        url: '/skills/' + skillId + '/stages/' + stage + '/validations/' + validationId,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('get-validation', general, headers, null, profile, doDebug, callback);
}

function callInvokeSkill(file, jsonObject, skillId, endpointRegion, profile, doDebug, callback) {
    let requestPayload = file ? jsonRead.readFile(file) : jsonObject;
    let invokeRequestPayload = {
        "endpointRegion": endpointRegion,
        "skillRequest": {
            "body": requestPayload
        }
    };

    let general = {
        url: '/skills/' + skillId + '/invocations',
        method: 'POST'
    };
    let headers = {};
    requestWrapper.request('invoke-skill', general, headers, invokeRequestPayload, profile, doDebug, callback);
}

function callSimulateSkill(file, text, skillId, locale, profile, doDebug, callback) {
    let payload = {
        "input": {
            "content": file ? fs.readFileSync(file, 'utf-8') : text
        },
        "device": {
            "locale": locale
        }
    };

    let general = {
        url: '/skills/' + skillId + '/simulations',
        method: 'POST'
    };
    let headers = {};
    requestWrapper.request('simulate-skill', general, headers, payload, profile, doDebug, callback);
}

function callGetSimulation(simulationId, skillId, profile, doDebug, callback) {
    let general = {
        url: '/skills/' + skillId + '/simulations/' + simulationId,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('get-simulation', general, headers, null, profile, doDebug, callback);
}

function callCreateSkill(manifest, vendorId, profile, doDebug, callback) {
    let general = {
        url: '/skills/',
        method: 'POST'
    };
    let headers = {};
    let payload = {
        vendorId: vendorId,
        manifest: manifest.manifest
    };
    requestWrapper.request('create-skill', general, headers, payload, profile, doDebug, callback);
}

function callGetSkill(skillId, stage, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/manifest';
    let general = {
        url: url,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('get-skill', general, headers, null, profile, doDebug, callback);
}

function handleGetSkillRedirect(redirectUrl, profile, doDebug, callback) {
    let headers = {};
    requestWrapper.requestWithUrl('get-skill-status', redirectUrl, 'GET', headers, null, profile, doDebug, callback);
}

function callUpdateSkill(skillId, stage, manifest, etag, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/manifest';
    let general = {
        url: url,
        method: 'PUT'
    };
    let headers = etag ? {'If-Match': etag} : {};
    let payload = {
        manifest: manifest.manifest
    };
    requestWrapper.request('update-skill', general, headers, payload, profile, doDebug, callback);
}

function callDeleteSkill(skillId, profile, doDebug, callback) {
    let url = '/skills/' + skillId;
    let general = {
        url: url,
        method: 'DELETE'
    };
    let headers = {};
    requestWrapper.request('delete-skill', general, headers, null, profile, doDebug, callback);
}

function callGetSkillStatus(skillId, resourcesList, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/status';
    // if resourcesList is null or empty, which means user doesn't specify certain resource,
    // SMAPI will return status for all the resources.
    if (resourcesList !== null && resourcesList.length !== 0) {
        url += ('?' + querystring.stringify({resource: resourcesList}));
    }

    let general = {
        url: url,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('get-skill-status', general, headers, null, profile, doDebug, callback);
}

function callListSkills(vendorId, nextToken, numberOfReturnSkills, profile, doDebug, callback) {
    let url = nextToken ?
        '/skills?vendorId=' + vendorId + '&nextToken=' + nextToken + '&maxResults=' + (numberOfReturnSkills || 50) :
        '/skills?vendorId=' + vendorId + '&maxResults=' + (numberOfReturnSkills || 50);

    let general = {
        url: url,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('list-skills', general, headers, null, profile, doDebug, callback);
}

function callGetModel(skillId, stage, locale, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/interactionModel/locales/' + locale;
    let general = {
        url: url,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('get-model', general, headers, null, profile, doDebug, callback);
}

function callGetUtteranceData(skillId, queryParameters, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/history/intentRequests?' + querystring.stringify(queryParameters);
    let general = {
        url: url,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('get-utterance-data', general, headers, null, profile, doDebug, callback);
}

function callHeadModel(skillId, stage, locale, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/interactionModel/locales/' + locale;
    let general = {
        url: url,
        method: 'HEAD'
    };
    let headers = {};
    requestWrapper.request('head-model', general, headers, null, profile, doDebug, callback);
}

function callUpdateModel(skillId, stage, locale, modelSchema, eTag, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/interactionModel/locales/' + locale;
    let general = {
        url: url,
        method: 'PUT'
    };
    let headers = eTag ? { 'If-Match': eTag } : {};
    let payload = {
        interactionModel: modelSchema.interactionModel
    };
    requestWrapper.request('update-model', general, headers, payload, profile, doDebug, callback);
}

function callCreateAccountLinking(skillId, stage, accountLinking, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/accountLinkingClient';
    let general = {
        url: url,
        method: 'PUT'
    };
    let headers = {};
    let payload = {
        accountLinkingRequest: accountLinking
    };
    requestWrapper.request('create-account-linking', general, headers, payload, profile, doDebug, callback);
}

function callGetAccountLinking(skillId, stage, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/accountLinkingClient';
    let general = {
        url: url,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('get-account-linking', general, headers, null, profile, doDebug, callback);
}

function callDeleteAccountLinking(skillId, stage, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/accountLinkingClient';
    let general = {
        url: url,
        method: 'DELETE'
    };
    let headers = {};
    requestWrapper.request('delete-account-linking', general, headers, null, profile, doDebug, callback);
}

function callListVendor(profile, doDebug, callback) {
    let url = '/vendors';
    let general = {
        url: url,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('list-vendors', general, headers, null, profile, doDebug, callback);
}

function callSubmit(skillId, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/submit';
    let general = {
        url: url,
        method: 'POST'
    };
    let headers = {};
    requestWrapper.request('submit', general, headers, null, profile, doDebug, callback);
}

function callWithdraw(skillId, withdrawReason, withdrawMessage, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/withdraw';
    let general = {
        url: url,
        method: 'POST'
    };
    let headers = {};
    let payload = {
        reason: withdrawReason,
        message: withdrawMessage
    };
    requestWrapper.request('withdraw', general, headers, payload, profile, doDebug, callback);
}

function callEnableSkill(skillId, stage, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/enablement';
    let general = {
        url: url,
        method: 'PUT'
    };
    let headers = {};
    requestWrapper.request('enable-skill', general, headers, null, profile, doDebug, callback);
}

function callDisableSkill(skillId, stage, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/enablement';
    let general = {
        url: url,
        method: 'DELETE'
    };
    let headers = {};
    requestWrapper.request('disable-skill', general, headers, null, profile, doDebug, callback);
}

function callGetSkillEnablement(skillId, stage, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/enablement';
    let general = {
        url: url,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('get-skill-enablement', general, headers, null, profile, doDebug, callback);
}

function callAddPrivateDistributionAccount(skillId, stage, accountId, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/privateDistributionAccounts/' + accountId;
    let general = {
        url: url,
        method: 'PUT'
    };
    let headers = {};
    requestWrapper.request('add-private-distribution-account', general, headers, null, profile, doDebug, callback);
}

function callDeletePrivateDistributionAccount(skillId, stage, accountId, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/privateDistributionAccounts/' + accountId;

    let general = {
        url: url,
        method: 'DELETE'
    };
    let headers = {};
    requestWrapper.request('delete-private-distribution-account', general, headers, null, profile, doDebug, callback);
}

function callListPrivateDistributionAccounts(skillId, stage, nextToken, numberOfReturnedAccounts, profile, doDebug, callback) {
    let url = '/skills/' + skillId + '/stages/' + stage + '/privateDistributionAccounts?';
    url += nextToken ?
        'nextToken=' + nextToken + '&maxResults=' + (numberOfReturnedAccounts || 50) :
        'maxResults=' + (numberOfReturnedAccounts || 50);
    let general = {
        url: url,
        method: 'GET'
    };
    let headers = {};
    requestWrapper.request('list-private-distribution-accounts', general, headers, null, profile, doDebug, callback);

}

/**
 * In-skill product APIs
 */

/**
 * Create in-skill product API wrapper
 * @param vendorId the vendor Id used to create in-skill product
 * @param ispDefinition [Required] in-skill product definition object
 * @param profile user profile
 * @param doDebug CLI debug mode
 * @param callback callback function from command
 */
function callCreateISP(vendorId, ispDefinition, profile, doDebug, callback) {
    let errorList = [];
    if (!vendorId) {
        errorList.push(ispConstants.ERROR.CANNOT_GET_VENDOR_ID_FROM_PROFILE);
    }
    if (!ispDefinition) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_DEFINITION);
    }
    if (errorList.length > 0) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: errorList
        });
        return;
    }

    let general = {
        url: ispConstants.URL.ISP_BASE,
        method: 'POST'
    };

    let headers = {};

    let payload = {
        vendorId: vendorId,
        inSkillProductDefinition: ispDefinition,
    };

    requestWrapper.request(ispConstants.API.CREATE_ISP, general, headers, payload, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

/**
 * Update in-skill product API wrapper
 * @param ispId [Required] in-skill product ID
 * @param ispDefinition [Required] in-skill product definition in JSON
 * @param stage [Required] in-skill product stage
 * @param profile user profile
 * @param eTag ETag to define the in-skill product version
 * @param doDebug CLI debug mode
 * @param callback callback function from command
 */
function callUpdateISP(ispId, ispDefinition, stage, profile, eTag, doDebug, callback) {
    let errorList = [];
    if (!ispId) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_PRODUCT_ID);
    }
    if (!ispDefinition) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_DEFINITION);
    }
    if (!stage) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_STAGE);
    }
    if (errorList.length > 0) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: errorList
        });
        return;
    }

    const url = ispConstants.URL.ISP_BASE + '/' + ispId + '/stages/' + stage;

    let general = {
        url: url,
        method: 'PUT'
    };

    let headers = {};

    if (eTag) {
        headers = {
            'If-Match': eTag
        };
    }

    let payload = {
        inSkillProductDefinition: ispDefinition
    };

    requestWrapper.request(ispConstants.API.UPDATE_ISP, general, headers, payload, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

/**
 * Get the information of given in-skill product API wrapper
 * @param ispId [Required] in-skill product ID
 * @param stage [Required] in-skill product stage
 * @param getSummary summary mode
 * @param profile user profile
 * @param doDebug CLI debug mode
 * @param callback callback function from command
 */
function callGetISP(ispId, stage, getSummary, profile, doDebug, callback) {
    let errorList = [];
    if (!ispId) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_PRODUCT_ID);
    }
    if (!stage) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_STAGE);
    }
    if (errorList.length > 0) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: errorList
        });
        return;
    }

    const url = ispConstants.URL.ISP_BASE + '/' + ispId + '/stages/' + stage + (getSummary ? '/summary' : '');

    let general = {
        url: url,
        method: 'GET'
    };

    let headers = {};

    requestWrapper.request(ispConstants.API.GET_ISP, general, headers, null, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

/**
 * Associate in-skill product with skill API wrapper
 * @param ispId [Required] in-skill product ID
 * @param skillId [Required] skill ID
 * @param profile user profile
 * @param doDebug CLI debug mode
 * @param callback callback function from command
 */
function callAssociateISP(ispId, skillId, profile, doDebug, callback) {
    let errorList = [];
    if (!ispId) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_PRODUCT_ID);
    }
    if (!skillId) {
        errorList.push(ispConstants.ERROR.MISSING_SKILL_ID);
    }
    if (errorList.length > 0) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: errorList
        });
        return;
    }

    const url = ispConstants.URL.ISP_BASE + '/' + ispId + '/skills/' + skillId;

    let general = {
        url: url,
        method: 'PUT'
    };

    let headers = {};

    requestWrapper.request(ispConstants.API.ASSOCIATE_ISP, general, headers, null, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

/**
 * Disassociate a in-skill product from a skill API wrapper
 * @param ispId [Required] in-skill product ID
 * @param skillId [Required] skill ID
 * @param profile user profile
 * @param doDebug CLI debug mode
 * @param callback callback function from command
 */
function callDisassociateISP(ispId, skillId, profile, doDebug, callback) {
    let errorList = [];
    if (!ispId) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_PRODUCT_ID);
    }
    if (!skillId) {
        errorList.push((ispConstants.ERROR.MISSING_SKILL_ID));
    }
    if (errorList.length > 0) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: errorList
        });
        return;
    }

    const url = ispConstants.URL.ISP_BASE + '/' + ispId + '/skills/' + skillId;

    let general = {
        url: url,
        method: 'DELETE'
    };

    let headers = {};

    requestWrapper.request(ispConstants.API.DISASSOCIATE_ISP, general, headers, null, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

/**
 * List skills associated with given in-skill product API wrapper
 * @param ispId [Required] in-skill product ID
 * @param stage [Required] in-skill product stage
 * @param maxResults max number of results returned, default is 50
 * @param nextToken token to get next page of results
 * @param profile user profile
 * @param doDebug CLI debug mode
 * @param callback callback function from command
 */
function callListSkillsForISP(ispId, stage, maxResults, nextToken, profile, doDebug, callback) {
    let errorList = [];
    if (!ispId) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_PRODUCT_ID);
    }
    if (!stage) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_STAGE);
    }
    if (errorList.length > 0) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: errorList
        });
        return;
    }

    let queryObject = {};

    queryObject.maxResults = maxResults ? maxResults : ispConstants.NUMBERS.DEFAULT_ISP_MAX_RESULTS;

    if (nextToken) {
        queryObject.nextToken = nextToken;
    }

    let qs = (maxResults || nextToken) ? querystring.stringify(queryObject) : '';

    let url = ispConstants.URL.ISP_BASE + '/' + ispId + '/stages/' + stage + '/skills?' + qs;

    let general = {
        url: url,
        method: 'GET'
    };

    let headers = {};

    requestWrapper.request(ispConstants.API.LIST_SKILLS_FOR_ISP, general, headers, null, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

/**
 * Delete in-skill product API wrapper
 * @param ispId [Required] in-skill product ID
 * @param stage [Required] in-skill product ID, only development stage supported
 * @param eTag Etag to define the in-skill product version
 * @param profile user profile
 * @param doDebug CLI debug mode
 * @param callback callback function from command
 */
function callDeleteISP(ispId, stage, eTag, profile, doDebug, callback) {
    let errorList = [];
    if (!ispId) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_PRODUCT_ID);
    }
    if (!stage) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_STAGE);
    }
    if (errorList.length > 0) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: errorList
        });
        return;
    }

    const url = ispConstants.URL.ISP_BASE + '/' + ispId + '/stages/' + stage;

    let general = {
        url: url,
        method: 'DELETE'
    };

    let headers = {};

    if (eTag) {
        headers = {
            'If-Match': eTag
        };
    }

    requestWrapper.request(ispConstants.API.DELETE_ISP, general, headers, null, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

/**
 * List in-skill product associated with the given skill API wrapper
 * @param skillId [Required] skill ID
 * @param stage [Required] in-skill product stage
 * @param maxResults max number of results returned, default is 50
 * @param nextToken token to get next page of results
 * @param profile user profile
 * @param doDebug CLI debug mode
 * @param callback callback function from command
 */
function callListISPForSkill(skillId, stage, maxResults, nextToken, profile, doDebug, callback) {
    let errorList = [];
    if (!skillId) {
        errorList.push(ispConstants.ERROR.MISSING_SKILL_ID);
    }
    if (!stage) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_STAGE);
    }
    if (errorList.length > 0) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: errorList
        });
        return;
    }

    let queryObject = {};

    queryObject.maxResults = maxResults ? maxResults : ispConstants.NUMBERS.DEFAULT_ISP_MAX_RESULTS;

    if (nextToken) {
        queryObject.nextToken = nextToken;
    }

    let qs = (maxResults || nextToken) ? querystring.stringify(queryObject) : '';

    const url = ispConstants.URL.SKILL_BASE + '/' + skillId + '/stages/' + stage + '/inSkillProducts?' + qs;

    let general = {
        url: url,
        method: 'GET'
    };

    let headers = {};

    requestWrapper.request(ispConstants.API.LIST_ISP_FOR_SKILL, general, headers, null, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

/**
 * List in-skill product with the given vendor API wrapper
 * @param vendorId [Required] vendor ID for the in-skill product
 * @param productIdList list of in-skill product Ids
 * @param referenceName the reference name of the in-skill product
 * @param type in-skill product type
 * @param stage in-skill product stage
 * @param status in-skill product status
 * @param isAssociatedWithSkill is the in-skill product associated with any skill
 * @param maxResults max number of results returned, default is 50
 * @param nextToken token to get the next page of results
 * @param profile user profile
 * @param doDebug CLI debug mode
 * @param callback callback function from command
 */
function callListISPForVendor(vendorId, productIdList, referenceName, type, stage, status, isAssociatedWithSkill, maxResults, nextToken, profile, doDebug, callback) {
    if (!vendorId) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: [ispConstants.ERROR.MISSING_VENDOR_ID]
        });
        return;
    }

    let queryObject = {};

    queryObject.vendorId = vendorId;

    if (productIdList && productIdList.length > 0) {
        queryObject.productId = productIdList.filter(id => id);
    }

    if (referenceName) {
        queryObject.referenceName = referenceName;
    }

    if (type) {
        queryObject.type = type;
    }

    if (stage) {
        queryObject.stage = stage;
    }

    if (status) {
        queryObject.status = status;
    }

    if (isAssociatedWithSkill) {
        queryObject.isAssociatedWithSkill = isAssociatedWithSkill;
    }

    if (maxResults) {
        queryObject.maxResults = maxResults;
    }

    if (nextToken) {
        queryObject.nextToken = nextToken;
    }

    let qs = querystring.stringify(queryObject);

    const url = ispConstants.URL.ISP_BASE + '?' + qs;

    let general = {
        url: url,
        method: 'GET'
    };

    let headers = {};

    requestWrapper.request(ispConstants.API.LIST_ISP_FOR_VENDOR, general, headers, null, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

/**
 * Reset the in-skill-product entitlement
 * @param productId [Required] the product id of in-skill product
 * @param stage [Required] the stage of in-skill product
 * @param profile the user profile
 * @param doDebug ASK CLI debug mode
 * @param callback the call back to handle the response
 */
function callResetISPEntitlement(productId, stage, profile, doDebug, callback) {
    let errorList = [];
    if (!productId) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_PRODUCT_ID);
    }
    if (!stage) {
        errorList.push(ispConstants.ERROR.MISSING_ISP_STAGE);
    }
    if (errorList.length > 0) {
        callback({
            message: ispConstants.ERROR.INVALID_API_PARAMETERS,
            violations: errorList
        });
        return;
    }

    const url = ispConstants.URL.ISP_BASE + '/' + productId + '/stages/' + stage + '/entitlement';

    let general = {
        url: url,
        method: 'DELETE'
    };

    let headers = {};

    requestWrapper.request(ispConstants.API.RESET_ISP_ENTITLEMENT, general, headers, null, profile, doDebug, (apiName, response) => {
        ispUtil.handleAPIResponse(apiName, response, callback);
    });
}

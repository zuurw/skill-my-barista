'use strict';

const apiWrapper = require('./api-wrapper');
const tools = require('../utils/tools');
const fs = require('fs');
const profileHelper = require('../utils/profile-helper');
const jsonUtility = require('../utils/json-utility');
const CONSTANTS = require('../utils/constants');
const async = require('async');
const os = require('os');
const path = require('path');

// Public
module.exports = {
    getSkillList: getSkillList,
    createCommand: (commander) => {
        buildCreateSkillCommand(commander);
        buildGetSkillCommand(commander);
        buildUpdateSkillCommand(commander);
        buildListSkillsCommand(commander);
        buildGetSkillStatusCommand(commander);
        buildDeleteSkillCommand(commander);
    }
};

// Private
function buildCreateSkillCommand(commander) {
    commander
        .command('create-skill')
        .usage('<-f|--file <file-path>> [-p|--profile <profile>] [--debug]')
        .description('create a skill')
        .option('-f, --file <file-path>', 'path for skill schema')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.file) {
            console.warn('Please input required parameter: file.');
            return;
        }
        if (!fs.existsSync(options.file)) {
            console.warn('Please verify skill schema is in current working directory.');
            return;
        }
        let manifest = jsonUtility.read(options.file);
        if (!manifest) {
            console.error('[Error]: Missing skill schema');
            return;
        }
        let configFile = path.join(os.homedir(), '.ask', 'cli_config');
        if (!fs.existsSync(configFile)) {
            console.warn('Please make sure ~/.ask/cli_config exists.');
            return;
        }
        tools.v1ManifestTransformer(options.file, true);

        // manifest might have changed from "tools.v1ManifestTransformer"
        manifest = jsonUtility.read(options.file);
        let profile = profileHelper.runtimeProfile(options.profile);
        let vendorId = profileHelper.resolveVendorId(profile);
        if (!vendorId) {
            console.error('[Error]: cannot find vendor id associated with the current profile');
            return;
        }

        apiWrapper.callCreateSkill(manifest, vendorId, profile, options.debug, (data) => {
            let response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log('Create skill request submitted.\nSkill ID: ' + response.skillId);
                console.log('Please use the following command to track the skill status:' +
                '\n    ask api get-skill-status -s ' + response.skillId);
            }
        });
    }
}

function buildGetSkillCommand(commander) {
    commander
        .command('get-skill')
        .usage('<-s|--skill-id <skill-id>> [-g|--stage <stage>] [-p|--profile <profile>] [--debug]')
        .description('get a skill')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'stage for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callGetSkill(options.skillId, stage, profile, options.debug, (data) => {
            if (data.statusCode !== 303) {
                let response = tools.convertDataToJsonObject(data.body);
                if (response) {
                    console.log(JSON.stringify(response, null, 2));
                }
            } else {
                if (data.body.location !== null) {
                    apiWrapper.handleGetSkillRedirect(data.body.location, profile, options.debug, (redirectResponseData) => {
                        let response = tools.convertDataToJsonObject(redirectResponseData.body);
                        if (response) {
                            console.log(JSON.stringify(response, null, 2));
                        }
                    });
                } else {
                    console.error('Call get-skill error.\nError code: 303');
                    console.error('There is no redirect URL in the response.');
                }
            } 
        });
    }
}

function buildUpdateSkillCommand(commander) {
    commander
        .command('update-skill')
        .usage('<-s|--skill-id <skill-id>> [-g|--stage <stage>] <-f|--file <file-path>> [-e|--etag <eTag>] [-p|--profile <profile>] [--debug]')
        .description('update the skill configuration details')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-g, --stage <stage>', 'skill-id for the skill')
        .option('-f, --file <file-path>', 'path for skill schema')
        .option('-e, --etag <eTag>', 'eTag for skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        let stage = options.stage || CONSTANTS.SKILL.STAGE.DEVELOPMENT;
        if (!options.file) {
            console.warn('Please input required parameter: file.');
            return;
        }
        if (!fs.existsSync(options.file)) {
            console.warn('Please verify skill schema is in current working directory.');
            return;
        }
        tools.v1ManifestTransformer(options.file, true);
        let profile = profileHelper.runtimeProfile(options.profile);
        let manifest = jsonUtility.read(options.file);
        apiWrapper.callUpdateSkill(options.skillId, stage, manifest, options.etag, profile, options.debug, () => {
            console.log('Update skill request submitted.');
            console.log('Please use the following command to track the skill status:' +
                '\n    ask api get-skill-status -s ' + options.skillId);
        });
    }
}

function buildDeleteSkillCommand(commander) {
    commander
        .command('delete-skill')
        .usage('<-s|--skill-id <skill-id>> [-p|--profile <profile>] [--debug]')
        .description('delete skill with given skill Id')
        .option('-s|--skill-id <skill-id>', 'skill-id for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            return;
        }
        let profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callDeleteSkill(options.skillId, profile, options.debug, () => {
            console.log('Skill deleted successfully.');
        });
    }
}

function buildListSkillsCommand(commander) {
    commander
        .command('list-skills')
        .usage('[-p|--profile <profile>] [--debug]')
        .description('list skills for a vendor')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        let profile = profileHelper.runtimeProfile(options.profile);
        getSkillList(profile, options.debug, (response) => {
            console.log(JSON.stringify(response, null, 2));
        });
    }
}

function buildGetSkillStatusCommand(commander) {
    commander
        .command('get-skill-status')
        .usage('<-s|--skill-id <skill-id>> [-p|--profile <profile>] [--debug]')
        .description('get the skill status for a skill')
        .option('-s, --skill-id <skill-id>', "skill-id for the skill")
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.error('[Error]: Please input required parameter: skill-id.');
            return;
        }
        let profile = profileHelper.runtimeProfile(options.profile);
        let resourceList = [CONSTANTS.SKILL.RESOURCES.MANIFEST, CONSTANTS.SKILL.RESOURCES.INTERACTION_MODEL];
        apiWrapper.callGetSkillStatus(options.skillId, resourceList, profile, options.debug, (data) => {
            let response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log(JSON.stringify(response, null, 2));
            }
        });
    }
}


// Private
function getSkillList(profile, doDebug, callback) {
    let nextToken;
    let result = {};
    result.skills = [];
    let vendorId = profileHelper.resolveVendorId(profile);
    if (!vendorId) {
        return;
    }
    async.doWhilst(
        (loopCallback) => {
            apiWrapper.callListSkills(vendorId, nextToken, 50, profile, doDebug, (data) => {
                let response = tools.convertDataToJsonObject(data.body);
                nextToken = response.nextToken;
                result.skills = result.skills.concat(deleteExtraProperty(response.skills));
                loopCallback(null, result);
            });
        },
        () => {
            return nextToken;
        },
        (err, result) => {
            if (err) {
                console.error(err);
                process.exit(1);
            }
            callback(result);
        }
    );
}

function deleteExtraProperty(skills) {
    let skillList = JSON.parse(JSON.stringify(skills));
    for (let item of skillList) {
        delete item._links;
    }
    return skillList;
}

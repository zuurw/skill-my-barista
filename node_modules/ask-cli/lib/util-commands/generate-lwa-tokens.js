'use strict';

const inquirer = require('inquirer');
const CONSTANTS = require('../utils/constants');
const lwaUtil = require('../utils/lwa');

module.exports = {
    createCommand: generateLWATokensCommand
};

/**
 * Generate "generate-lwa-tokesn" command.
 * @param commander
 */
function generateLWATokensCommand(commander) {
    commander
        .command('generate-lwa-tokens')
        .usage('[--scope <scope>] [--no-browser]')
        .description('generates LWA tokens from 3p clientId and clientCredentials')
        .option('--no-browser', 'display authorization url instead of opening browser')
        .option('--scope <scope>', 'request particular scope(s) from Login With Amazon')
        .action(handle);

    function handle(options) {
        if (options && typeof options === 'string') {
            console.error('[Error]: Invalid command. Please run "ask init -h" for help.');
            return;
        }
        let scopes = null;
        if (!options.scope) {
            scopes = CONSTANTS.LWA.DEFAULT_SCOPES;
        } else {
            scopes = options.scope;
        }
        _getClientCredentials((credentials) => {
            lwaUtil.accessTokenGenerator(credentials, scopes, CONSTANTS.LWA.DEFAULT_STATE, options.browser, (error, tokens) => {
                if (error) {
                    console.error('[Error]: ' + error);
                    process.exit(1);
                } else {
                    _outputTokens(tokens);
                    process.exit(0);
                }
            });
        });
    }
}

/**
 * Get 3rd party clientId and clientSecret
 * @param callback
 * @private
 */
function _getClientCredentials(callback) {
    inquirer.prompt([
        {
            message: 'Please type in the client ID:\n',
            type: 'input',
            name: 'clientId',
            validate: (value) => {
                let pass = value.trim();
                if (!pass) {
                    return 'Please enter a valid client ID.';
                } else {
                    return true;
                }
            }
        },
        {
            message: 'Please type in the client secret:\n',
            type: 'input',
            name: 'clientSecret',
            validate: (value) => {
                let pass = value.trim();
                if (!pass) {
                    return 'Please enter a valid client secret.';
                } else {
                    return true;
                }
            }
        }
    ]).then((answer) => {
        let credentials = {};
        credentials.clientId = answer.clientId.trim();
        credentials.clientSecret = answer.clientSecret.trim();
        callback(credentials);
    });
}

/**
 * Display tokens
 * @param tokens
 * @private
 */
function _outputTokens(tokens) {
    console.log(JSON.stringify(tokens, null, 2));
}

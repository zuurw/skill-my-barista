'use strict';

const path = require('path');
const async = require('async');
const mkdirp = require('mkdirp');

const profileHelper = require('../utils/profile-helper');
const lambdaEndpointUtility = require('../utils/lambda-operation/lambda-endpoint-utility');
const ifMatchUtil = require('../utils/if-match-utility');
const displayUtil = require('../utils/display-utility');
const download = require('../lambda/download');


module.exports = {
    clone: clone
};

function clone(lambdaPath, skillInfo, configPath, profile, callback) {
    const awsProfile = profileHelper.getAWSProfile(profile);
    if (!awsProfile || awsProfile.length === 0) {
        console.log('No AWS credential setup for profile: [' + profile + ']. Lambda clone' +
            " skipped. CLI lambda functionalities can be enabled by running `ask init` again" +
            " to add 'aws_profile' to ASK cli_config\n");
        callback(null, []);
        return;
    }
    const resourceList = lambdaEndpointUtility.generateLambdaResourceList(skillInfo.endpointsInfo);
    const downloadedLambdaMetaDataObjectList = [];

    const downloadSpinner = new displayUtil.Spinner('Lambda downloading...');
    downloadSpinner.start();
    async.each(resourceList, (lambdaMetaDataObject, downloadCallback) => {
        const downloadDirectory = path.join(lambdaPath, `${lambdaMetaDataObject.awsRegion}_${lambdaMetaDataObject.functionName}`);
        try {
            mkdirp.sync(downloadDirectory);
        } catch (err) {
            console.error('[Error]: Cannot create file path for: ' + downloadDirectory);
            console.error(err);
            downloadCallback(err);
        }

        download.downloadByName(lambdaMetaDataObject.arn, downloadDirectory, awsProfile, (err, lambdaResult) => {
            if (err) {
                downloadCallback(err);
            } else {
                lambdaMetaDataObject.revisionId = lambdaResult.revisionId;
                downloadedLambdaMetaDataObjectList.push(lambdaMetaDataObject);
                downloadCallback();
            }
        });
    }, (error) => {
        downloadSpinner.stop();
        if (error) {
            callback(error);
        } else {
            ifMatchUtil.recordLambdaRevisionId(downloadedLambdaMetaDataObjectList, profile, configPath);
            _printLambdaCloneResult(downloadedLambdaMetaDataObjectList);
            callback(null, downloadedLambdaMetaDataObjectList);
        }
    });
}

function _printLambdaCloneResult(downloadLambdaList) {
    if (downloadLambdaList && downloadLambdaList.length > 0) {
        console.log(`Lambda cloned successfully for the following ARN(s):`);
        downloadLambdaList.forEach((lambdaMetadata) => {
            console.log('    ' + lambdaMetadata.arn);
        });
        console.log();
    }
}

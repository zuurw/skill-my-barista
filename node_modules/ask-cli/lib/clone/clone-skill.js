'use strict';

const apiWrapper = require('../api/api-wrapper');
const tools = require('../utils/tools');
const CONSTANTS = require('../utils/constants');
const jsonfile = require('jsonfile');
const ifMatchUtil = require('../utils/if-match-utility');

// Public
module.exports = {
    getSkill: getSkill,
    clone: clone
};

function getSkill(skillId, profile, doDebug, callback) {
    // ask clone will only call get-skill with development stage
    apiWrapper.callGetSkill(skillId, CONSTANTS.SKILL.STAGE.DEVELOPMENT, profile, doDebug, (data) => {
        if (data.statusCode !== 303) {
            let response = {};
            response.skillManifest = tools.convertDataToJsonObject(data.body);
            response.eTag = data.headers.etag;
            if (response.skillManifest) {
                callback(response);
            }
        } else {
            if (data.body.location !== null) {
                apiWrapper.handleGetSkillRedirect(data.body.location, profile, doDebug, (redirectResponseData) => {
                    let response = tools.convertDataToJsonObject(redirectResponseData.body);
                    if (response) {
                        console.log(JSON.stringify(response, null, 2));
                    }
                });
            } else {
                console.error('Call get-skill error.\nError code: 303');
                console.error('There is no redirect URL in the response.');
            }
        }
    });
}

function clone(skillPath, skillManifest, skillName, skillETag, configPath, profile) {
    jsonfile.writeFileSync(skillPath, skillManifest, {spaces: 2});
    ifMatchUtil.recordSkillEtag(skillETag, profile, configPath);
    console.log('Skill schema for ' + skillName + ' created at\n' +
        '    ./' + skillName + '/skill.json\n');
}

'use strict';

const jsonUtility = require('../utils/json-utility');
const domainRegistry = require('../utils/domain-registry');
const path = require('path');

module.exports = {
    localizing: localizing
};


function localizing(skillPath, configPath, listOfReOrgLambdaInfoObject, profile) {
    let skillJson = jsonUtility.read(skillPath);
    let configJson = jsonUtility.read(configPath);

    for (let lambdaInfo of listOfReOrgLambdaInfoObject) {
        for (let alexaUsage of lambdaInfo.alexaUsage) {
            let usage = alexaUsage.split('/');
            let domain = usage[0];
            let region = usage[1];

            let domainKey = domainRegistry.getSkillSchemaKey(domain);
            let skillJsonPropertyPathToUri = region !== 'default' ?
                ['manifest', 'apis', domainKey, 'regions', region, 'endpoint', 'uri'] :
                ['manifest', 'apis', domainKey, 'endpoint', 'uri'];

            let uri = jsonUtility.getPropertyValueFromObject(skillJson, skillJsonPropertyPathToUri);
            if (!uri || uri.length === 0) {
                continue;
            }
            if (uri.substr(0, 5) === 'https') {
                continue;
            }
            // delete uri property from skill.json
            jsonUtility.deletePropertyFromJsonObject(skillJson, skillJsonPropertyPathToUri);

            // write sourceDir to skill.json
            let skillJsonPropertyPathToSourceDir = region !== 'default' ?
                ['manifest', 'apis', domainKey, 'regions', region, 'endpoint', 'sourceDir'] :
                ['manifest', 'apis', domainKey, 'endpoint', 'sourceDir'];


            let relativePath = `.${path.sep}lambda${path.sep}${lambdaInfo.awsRegion}_${lambdaInfo.functionName}`;

            jsonUtility.insertObjectToObject(skillJson, skillJsonPropertyPathToSourceDir, relativePath);

            // write uri to config
            let configPropertyPathToUri = region !== 'default' ?
                ['deploy_settings', profile, 'merge', 'manifest', 'apis', domainKey, 'regions', region, 'endpoint', 'uri'] :
                ['deploy_settings', profile, 'merge', 'manifest', 'apis', domainKey, 'endpoint', 'uri'];
            jsonUtility.insertObjectToObject(configJson, configPropertyPathToUri, uri);
        }
    }
    jsonUtility.write(skillPath, skillJson);
    jsonUtility.write(configPath, configJson);
}

'use strict';

const apiWrapper = require('../api/api-wrapper');
const CONSTANTS = require('../utils/constants');
const tools = require('../utils/tools');


module.exports = {
    statusCheck: statusCheck
};

/**
 * Check all the skill resources' status, return false if any of the resources is in progress.
 * @param skillId
 * @param profile
 * @param doDebug
 * @param callback
 */
function statusCheck(skillId, profile, doDebug, callback) {
    apiWrapper.callGetSkillStatus(skillId, null, profile, doDebug, (data) => {
        const response = tools.convertDataToJsonObject(data.body);
        if (!response) {
            callback(undefined);
        } else {
            callback(_isResourceNotInBuildProgress(response));
        }
    });
}

/**
 * Recursively finding all the values for "status" from the get-skill-status response.
 * @param statusObject
 * @return {boolean}
 * @private
 */
function _isResourceNotInBuildProgress(statusObject) {
    if (typeof statusObject === 'string') {
        if (statusObject.hasOwnProperty('status')) {
            return statusObject.status !== CONSTANTS.SKILL.BUILD_STATUS.IN_PROGRESS;
        } else {
            return true;
        }
    } else if (typeof statusObject === 'object'){
        let didBuildFinish = true;
        for (let key of Object.keys(statusObject)) {
            let inProgress = _isResourceNotInBuildProgress(statusObject[key]);
            // if inProgress or finishedBuild if false for once, it will always be false
            didBuildFinish = didBuildFinish && inProgress;
        }
        return didBuildFinish;
    } else {
        console.error('[Error]: Failed to parse skill status.');
        process.exit(1);
    }
}

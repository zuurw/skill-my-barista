'use strict';

const apiWrapper = require('../api/api-wrapper');
const tools = require('../utils/tools');
const CONSTANTS = require('../utils/constants');
const jsonfile = require('jsonfile');
const async = require('async');
const path = require('path');
const Spinner = require('../utils/display-utility').Spinner;
const ifMatchUtil = require('../utils/if-match-utility');

module.exports = {
    cloneModel: cloneModel
};

function cloneModel(modelPath, skillId, skillInfo, configPath, profile, doDebug, callback) {
    let cloneModelSpinner = new Spinner('Cloning model(s)...');
    cloneModelSpinner.start();
    refineLocalListByHeadModel(skillId, skillInfo.publishLocaleList, profile, doDebug, (error, customLocalList) => {
        cloneModelSpinner.stop();
        if (error) {
            console.error(error);
            return;
        }
        // customLocalList is the sub-set of publishLocaleList
        createModelSchema(modelPath, skillId, skillInfo.skillName, customLocalList, profile, doDebug, (error, eTagsList) => {
            if (error) {
                callback(error);
            } else {
                ifMatchUtil.recordModelEtag(eTagsList, profile, configPath);
                callback();
            }
        });
    });
}

function createModelSchema(modelPath, skillId, skillName, customLocalList, profile, doDebug, callback) {
    let etagsList = [];
    async.eachSeries(customLocalList, (locale, createCallback) => {
        setTimeout(() => {
            apiWrapper.callGetModel(skillId, CONSTANTS.SKILL.STAGE.DEVELOPMENT, locale, profile, doDebug, (data) => {
                let modelSchemaPath = path.join(modelPath, (locale + '.json'));
                let modelSchema = tools.convertDataToJsonObject(data.body);
                if (modelSchema) {
                    jsonfile.writeFileSync(modelSchemaPath, modelSchema, {spaces: 2});
                    console.log('Skill model for ' + locale + ' created at\n' +
                        '    ./' + skillName + '/models/' + locale + '.json');
                    etagsList.push({
                        locale: locale,
                        eTag: data.headers.etag
                    });
                    createCallback();
                } else {
                    createCallback('Cannot retrieve model data.');
                }
            });
        }, CONSTANTS.CONFIGURATION.TIME_INTERVAL_FOR_ASYNC_REQUEST);
    }, (error) => {
        console.log();
        callback(error, etagsList);
    });
}

function refineLocalListByHeadModel(skillId, localList, profile, doDebug, callback) {
    let customLocalList = [];
    async.eachSeries(localList, (locale, checkCallBack) => {
        setTimeout(() => {
            apiWrapper.callHeadModel(skillId, CONSTANTS.SKILL.STAGE.DEVELOPMENT, locale, profile, doDebug, (data) => {
                if (data.statusCode !== 404) {
                    customLocalList.push(locale);
                }
                checkCallBack();
            });
        }, CONSTANTS.CONFIGURATION.TIME_INTERVAL_FOR_ASYNC_REQUEST);
    }, (error) => {
        callback(error, customLocalList);
    });
}

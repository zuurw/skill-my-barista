'use strict';

const oauthWrapper = require('../utils/oauth-wrapper');
const opn = require('opn');
const http = require('http');
const url = require('url');
const inquirer = require('inquirer');
const portscanner = require('portscanner');
const CONSTANTS = require('../utils/constants');
const displayUtil = require('../utils/display-utility');

module.exports = {
    accessTokenGenerator: accessTokenGenerator,
    _requestTokens: _requestTokens,
    _getAuthCode: _getAuthCode,
    _listenResponseFromLWA: _listenResponseFromLWA
};

/**
 * Use LWA OAuth2 to retrieve access tokens.
 * @param credentials The clientId and clientSecret from https://developer.amazon.com/lwa
 * @param scopes
 * @param state
 * @param needBrowser
 * @param callback  Json object which includes:
 *                 'access_token', 'refresh_token', 'token_type', 'expires_in', and 'expires_at'
 */
function accessTokenGenerator(credentials, scopes, state, needBrowser, callback) {
    let OAuth = oauthWrapper.createOAuth(credentials.clientId, credentials.clientSecret);

    if (!needBrowser) {
        // prepare url which the user can use to call LWA
        let authorizeUrl = OAuth.authorizationCode.authorizeURL({
            redirect_uri: CONSTANTS.LWA.S3_RESPONSE_PARSER_URL,
            scope: scopes,
            state: state
        });
        console.log('Paste the following url to your browser:\n',
            '        ' + authorizeUrl + '\n');

        _getAuthCode((authCode) => {
            _requestTokens(authCode, CONSTANTS.LWA.S3_RESPONSE_PARSER_URL, OAuth, callback);
        });
    } else {
        const PORT = 9090;
        portscanner.checkPortStatus(PORT, (error, status) => {
            if (error) {
                callback(error);
            } else {
                if (status === 'closed') {
                    // if the port haven't being used, start a server and listen to
                    // lwa response which has the authorization code.
                    const localServerUrl = 'http://127.0.0.1:' + PORT + '/cb';
                    let authorizeUrl = OAuth.authorizationCode.authorizeURL({
                        redirect_uri: localServerUrl,
                        scope: scopes,
                        state: state
                    });

                    // call LWA on behalf of the user
                    opn(authorizeUrl);
                    console.log('Switch to \'Login with Amazon\' page...');

                    _listenResponseFromLWA(PORT, (error, authCode) => {
                        if (error) {
                            callback(error);
                        } else {
                            _requestTokens(authCode, localServerUrl, OAuth, callback);
                        }
                    });
                } else {
                    console.warn('[Warn]: 9090 port on localhost has been occupied, ' +
                        'ask-cli cannot start a local server for receiving authorization ode.');
                    console.info('Please either abort any processes running on port 9090\n' +
                        'or add `--no-browser` flag to the command as an alternative approach.');
                }
            }
        });

    }
}

/**
 * Ask the auth code from the user.
 * @param callback Authorization code
 * @private
 */
function _getAuthCode(callback) {
    inquirer.prompt([
        {
            type: 'input',
            name: 'authCode',
            message: 'Please enter the Authorization Code: ',
            validate: (value) => {
                let pass = value.trim();
                if (!pass) {
                    return 'Please enter a valid Authorization Code.';
                } else {
                    return true;
                }
            }
        }
    ]).then(
        (answer) => {
            callback(answer.authCode);
        }
    );
}

/**
 * Use the auth code to retrieve access token and other associated info from LWA.
 * @param authCode
 * @param redirect_uri
 * @param OAuth
 * @param callback Json object which includes:
 *                 'access_token', 'refresh_token', 'token_type', 'expires_in', and 'expires_at'
 * @private
 */
function _requestTokens(authCode, redirect_uri, OAuth, callback) {
    let tokenConfig = {
        code: authCode,
        redirect_uri: redirect_uri
    };

    OAuth.authorizationCode.getToken(tokenConfig, (error, result) => {
        if (error) {
            callback('Cannot obtain access token. ' + error);
        } else {
            let token = OAuth.accessToken.create(result).token;
            callback(null, token);
        }
    });
}

/**
 * Start a local server and listen the response from LWA,
 * then extract authorization code from it.
 * @param PORT
 * @param OAuth
 * @param callback Authorization code
 * @private
 */
function _listenResponseFromLWA(PORT, callback) {
    let listenSpinner;
    let server = http.createServer(handleServerRequest);
    server.on('connection', (socket) => {
        socket.unref();
        return;
    });
    server.listen(PORT, () => {
        listenSpinner = new displayUtil.Spinner(' Listening on http://localhost:' + PORT);
        listenSpinner.start();
    });

    function handleServerRequest(request, response) {
        response.on('close', () => {
            request.socket.destroy();
        });
        let requestQuery = url.parse(request.url, true).query;
        listenSpinner.stop();
        server.close();
        server.unref();
        if (request.url.startsWith('/cb?code')) {
            response.end('Sign in was successful. Close this browser and return to the command line interface.');
            let authCode = requestQuery.code;
            callback(null, authCode);
        } else if (request.url.startsWith('/cb?error')) {
            response.statusCode = 403;
            response.end('Error: ' + requestQuery.error +
                '\nError description: ' + requestQuery.error_description);
            callback('Access not granted.');
        }
    }
}


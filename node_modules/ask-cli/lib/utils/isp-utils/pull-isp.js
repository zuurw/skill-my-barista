'use strict';

const jsonfile = require('jsonfile');
const path = require('path');
const fs = require('fs');

const cloneISPUtil = require('../../clone/clone-isp');
const ispUtils = require('./isp-utility');

module.exports = {
    pullISP: pullISP
};

/**
 * Pull latest in-skill products from developer account
 * @param ispToPull set of in-skill product configuration object
 * @param skillProjectPath path to the skill project
 * @param profile ASK CLI user profile
 * @param doDebug ASK CLI debug mode
 * @param callback callback to handle the response
 */
function pullISP(ispToPull, skillProjectPath, profile, doDebug, callback) {

    if (!ispToPull || Object.prototype.toString.call(ispToPull) !== '[object Set]') {
        callback('A set of in-skill product(s) to pull need to be provided.');
        return;
    }
    if (!skillProjectPath || !fs.existsSync(skillProjectPath)) {
        callback('Invalid path of the skill project.');
        return;
    }
    if (ispToPull.size === 0) {
        callback();
        return;
    }

    const ispConfigList = ispUtils.getISPConfigs(skillProjectPath, profile);
    const ispIdList = Array.from(ispToPull);
    cloneISPUtil.getISPs(ispIdList, profile, doDebug, (getISPError, ispInfoMap) => {
        if (getISPError) {
            callback(getISPError);
            return;
        }
        if (!ispInfoMap || ispInfoMap.size === 0) {
            callback();
            return;
        }
        for (let ispConfig of ispConfigList) {
            if (ispConfig && ispConfig.productId && ispToPull.has(ispConfig.productId)) {
                const ispInfo = ispInfoMap.get(ispConfig.productId);
                //Update in-skill product eTag in configuration file
                ispConfig.eTag = ispInfo.eTag;
                //Update definition file of the co-responding in-skill product
                const ispFilePath = path.join(skillProjectPath, ispConfig.filePath);
                jsonfile.writeFile(ispFilePath, ispInfo.definition, {spaces: 2}, (writeFileError) => {
                    if (writeFileError) {
                        callback(writeFileError);
                    }
                });
            }
        }
        ispUtils.replaceISPConfigs(skillProjectPath, profile, ispConfigList);
        callback(null, ispConfigList);
    });
}

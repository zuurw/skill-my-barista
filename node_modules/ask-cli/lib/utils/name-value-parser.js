'use strict';

const errorMessages = require('./error-messages');

module.exports = {
    parseNameValuePairsStringAsObject: parseNameValuePairsStringAsObject
};

/**
 * Parses a string as semicolon-delimited list of name/value pairs into an object. Each value is an entry in an array
 * stored in object[name].
 *
 * "Name=myField, Values= myValue1,myValue2 ;Name = otherField, Value =myValue3" results in the object:
 *
 * {
 *   myField: ["myValue1", "myValue2"],
 *   otherField: ["myValue3"]
 * }
 *
 * @param {string} nameValuePairsString - String of comma-delimited name/value pairs, each in the format "Name=[name],Values=[value,value...]"
 * @returns {object} - Object with each property of a given name mapped to an array of string values.
 */
function parseNameValuePairsStringAsObject(nameValuePairsString) {
    let object = {};
    if (!nameValuePairsString) {
        return object;
    }
    nameValuePairsString.split(';').forEach(filterString => {
        let nameValueMatch = /^\s*Name\s*=\s*([^,\s]+?)\s*,\s*Value[s]*\s*=\s*(.+?)\s*$/.exec(filterString);

        if (!nameValueMatch) {
            throw new Error(errorMessages.utils.nameValueParser.invalidNameValuePair);
        }

        let name = nameValueMatch[1];
        let values = nameValueMatch[2].split(',').filter(s => s && s.match(/^\s*$/) === null);

        if (values.length === 0) {
            throw new Error(errorMessages.utils.nameValueParser.noParsableValuesForName(name));
        }

        if (name in object) {
            Array.prototype.push.apply(object[name], values);
        } else {
            object[name] = values;
        }
    });
    return object;
}
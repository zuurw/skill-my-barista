'use strict';

const async = require('async');
const child = require('child_process');
const path = require('path');
const fs = require('fs');

/**
 * This async function will detect valid lambda function and install node_module according to
 * package.json in the same directory if it's not installed.
 * @param skillInfo
 * @param packageDir
 * @param doDebug
 * @param callback
 */
module.exports.install = (createLambdaList, updateLambdaList, packageDir, doDebug, callback) => {
    if (!callback) {
        callback = doDebug;
        doDebug = false;
    }
    if (!createLambdaList && !updateLambdaList) {
        callback();
        return;
    }

    let createList = createLambdaList.filter((lambdaMetaDataInfo) => {
        const lambdaPath = path.join(packageDir, lambdaMetaDataInfo.sourceDir);
        return _needInstallNodeModule(lambdaPath, doDebug);
    });

    let updateList = updateLambdaList.filter((lambdaMetaDataInfo) => {
        const lambdaPath = path.join(packageDir, lambdaMetaDataInfo.sourceDir);
        return _needInstallNodeModule(lambdaPath, doDebug);
    });

    const installPathList = createList.concat(updateList);
    async.each(installPathList, (lambdaMetaData, asyncCallback) => {
        const installPath = path.join(packageDir, lambdaMetaData.sourceDir);
        _installNodeModule(installPath, asyncCallback);
    }, (err) => {
        callback(err);
    });
};

//private
function _installNodeModule(destination, callback) {
    child.exec('npm install', {
        cwd: destination
    }, (err) => callback(err));
}

function _needInstallNodeModule(lambdaPackagePath, doDebug) {
    const packagePath = path.join(lambdaPackagePath, 'package.json');
    const nodeModulePath = path.join(lambdaPackagePath, 'node_modules');

    if (!fs.existsSync(packagePath)) {
        if (doDebug) {
            console.info(`[Info]: No package.json found in ${lambdaPackagePath}, skipping the installation of the node module.`);
        }
        return false;
    } else if (fs.existsSync(nodeModulePath)) {
        if (doDebug) {
            console.info(`[Info]: node_modules exists in ${lambdaPackagePath}, skipping the installation of the node module.`);
        }
        return false;
    } else {
        return true;
    }
}

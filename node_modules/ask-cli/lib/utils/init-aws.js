'use strict';

const aws = require('aws-sdk');
const CONSTANT = require('./constants');

module.exports = {
    initAWS: initAWS,
    isLambdaArn: isLambdaArn,
    setRegionWithLambda: setRegionWithLambda,
    resolveRegionCodeFromRegion: resolveRegionCodeFromRegion
};

function initAWS(awsProfile) {
    if (!awsProfile) {
        console.error('[Error]: AWS credentials are not found in current profile.');
        process.exit(1);
    } else if (awsProfile === CONSTANT.PLACEHOLDER.ENVIRONMENT_VAR.AWS_CREDENTIALS) {
        let awsAccessKeyId;
        let awsSecretAccessKey;

        try {
            awsAccessKeyId = process.env.AWS_ACCESS_KEY_ID;
            awsSecretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;
        } catch (error) {
            console.error(error.message);
            process.exit(1);
        }

        if (!awsAccessKeyId) {
            console.error('[Error]: Cannot find the environment variable: AWS_ACCESS_KEY_ID');
            process.exit(1);
        } else if (!awsSecretAccessKey) {
            console.error('[Error]: Cannot find the environment variable: AWS_SECRET_ACCESS_KEY');
            process.exit(1);
        }

        aws.config.credentials = new aws.Credentials(awsAccessKeyId, awsSecretAccessKey);
    } else {
        aws.config.credentials =
            new aws.SharedIniFileCredentials({
                profile: awsProfile
            });
    }
    aws.config.update({
        region: 'us-east-1'
    });
    return aws;
}

function isLambdaArn(arn) {
    let lambdaArn = arn.match(/arn:aws:lambda:([a-z]{2})-([a-z]{4})([a-z]*)-\d{1}:\d*:function:/g);
    if (lambdaArn) {
        return true;
    } else {
        return false;
    }
}

function setRegionWithLambda(aws, arn) {
    let region = arn.match(/([a-z]{2})-([a-z]{4})([a-z]*)-\d{1}/g);
    aws.config.update({
        region: region[0]
    });
    return aws;
}

function resolveRegionCodeFromRegion(region) {
    let regionCode =  CONSTANT.REGION_MAPPING[region] || CONSTANT.REGION_MAPPING.NA;
    return regionCode;
}
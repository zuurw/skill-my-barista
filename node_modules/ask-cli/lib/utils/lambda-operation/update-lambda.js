'use strict';

const upload = require('../../lambda/upload');
const async = require('async');
const clui = require('clui');
const CONSTANT = require('../../utils/constants');

module.exports = {
    updateLambda: updateLambda
};

function updateLambda(updateLambdaList, awsProfile, forceDeployment, callback) {
    let Spinner = clui.Spinner;
    let uploadSpinner = new Spinner(' Updating Lambda function...');
    uploadSpinner.start();
    async.eachSeries(updateLambdaList, (metaData, asyncCallback) => {
        setTimeout(() => {
            let revisionId = forceDeployment ? null : metaData.revisionId;
            upload.uploadByName(metaData.arn, metaData.sourceDir, revisionId, awsProfile, (err, updatedRevisionId) => {
                if (err) {
                    let errorPrintOut = `[Error]: Lambda update failed. Lambda ARN: ${metaData.arn}\n${err.message}`;
                    asyncCallback(errorPrintOut);
                } else {
                    // get new revisionId and write back to the metaDataObject.
                    metaData.revisionId = updatedRevisionId;
                    asyncCallback();
                }
            });
        }, CONSTANT.CONFIGURATION.TIME_INTERVAL_FOR_ASYNC_REQUEST);
    }, (err) => {
        uploadSpinner.stop();
        if (err) {
            console.error(err);
            process.exit(1);
        }
        callback(updateLambdaList);
    });
}

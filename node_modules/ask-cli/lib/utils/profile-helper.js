'use strict';
const fs = require('fs');
const os = require('os');
const path = require('path');
const jsonUtility = require('./json-utility');
const FORMATTER_SPACING = 26;
const CONSTANT = require('./constants');

module.exports = {
    runtimeProfile: runtimeProfile,
    getAWSProfile: getAWSProfile,
    checkASKProfileExist: checkASKProfileExist,
    setupProfile: setupProfile,
    deleteProfile: deleteProfile,
    getListProfile: getListProfile,
    displayProfile: displayProfile,
    stringFormatter: stringFormatter,
    resolveVendorId: resolveVendorId,
    askProfileSyntaxValidation: askProfileSyntaxValidation
};

function runtimeProfile(profile) {
    let askProfile = profile || _findEnvProfile() || process.env.ASK_DEFAULT_PROFILE || 'default';
    if (!module.exports.checkASKProfileExist(askProfile)) {
        console.error('[Error]: Cannot resolve profile [' + askProfile + ']');
        process.exit(1);
    }
    return askProfile;
}

function _findEnvProfile() {
    if (!(process.env.AWS_ACCESS_KEY_ID || process.env.AWS_SECRET_ACCESS_KEY)) {
        return null;
    }
    return CONSTANT.PLACEHOLDER.ENVIRONMENT_VAR.PROFILE_NAME;
}

function getAWSProfile(askProfile) {
    if (askProfile === CONSTANT.PLACEHOLDER.ENVIRONMENT_VAR.PROFILE_NAME) {
        let awsAccessKeyId = process.env.AWS_ACCESS_KEY_ID;
        let awsSecretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;
        if (!awsAccessKeyId || !awsSecretAccessKey) {
            return; // the error got handled in the downstream.
        } else {
            // if there's aws credentials, return the special string that notify
            // CLI look for aws credentials in env var.
            return CONSTANT.PLACEHOLDER.ENVIRONMENT_VAR.AWS_CREDENTIALS;
        }
    } else {
        let awsCredentials = path.join(os.homedir(), '.ask', 'cli_config');
        let propertyPathForAWSProfile = ['profiles', askProfile, 'aws_profile'];
        return jsonUtility.getProperty(awsCredentials, propertyPathForAWSProfile);
    }
}

function checkASKProfileExist(profileName) {
    if (profileName === CONSTANT.PLACEHOLDER.ENVIRONMENT_VAR.PROFILE_NAME) return true;
    let askCliConfig = path.join(os.homedir(), '.ask', 'cli_config');
    let askProfile = jsonUtility.read(askCliConfig);
    return askProfile.profiles.hasOwnProperty(profileName);
}

function setupProfile(awsProfile, askProfile, callback) {
    let homeConfig = path.join(os.homedir(), '.ask', 'cli_config');
    let propertyPathArray = ['profiles', askProfile, 'aws_profile'];
    jsonUtility.writeToProperty(homeConfig, propertyPathArray, awsProfile);
    callback();
}

function deleteProfile(profile) {
    let configPath = path.join(os.homedir(), '.ask', 'cli_config');
    let targetPath = ['profiles', profile];
    jsonUtility.deleteProperty(configPath, targetPath);
}

function getListProfile() {
    let askConfig = path.join(os.homedir(), '.ask', 'cli_config');
    if (!fs.existsSync(askConfig)) {
        return null;
    }
    let profileObject = jsonUtility.read(askConfig);
    let profiles = profileObject.profiles;
    if (!profiles || Object.keys(profiles).length === 0) {
        return null;
    }
    let printOut = [];
    for (let profile of Object.getOwnPropertyNames(profiles)) {
        printOut.push({
            'askProfile': profile,
            'awsProfile': profiles[profile].aws_profile
        });
    }
    return printOut;
}

function displayProfile() {
    const HEADER = 'Profile              Associated AWS Profile';
    let profileList = stringFormatter(getListProfile());
    if (!profileList) {
        console.warn('ask-cli has not set up any profiles yet.');
        return;
    }
    profileList.splice(0, 0, HEADER);
    profileList.forEach((profile) => {
        console.log('  ' + profile);
    });
}

function stringFormatter(profileList) {
    if (!profileList || profileList.length === 0) {
        return null;
    }
    let formattedProfileList = [];
    for (let profileObj of profileList) {
        let formattedASKProfile = '[' + profileObj.askProfile + ']';
        let fillingSpace = ' ';
        if (formattedASKProfile.length <= FORMATTER_SPACING) {
            fillingSpace = ' '.repeat(FORMATTER_SPACING-formattedASKProfile.length);
        }
        if (!profileObj.awsProfile) {
            formattedProfileList.push(formattedASKProfile + fillingSpace + '** NULL **');
            continue;
        }
        formattedProfileList.push(formattedASKProfile + fillingSpace  + '"' + profileObj.awsProfile + '"');
    }
    return formattedProfileList;
}

function resolveVendorId(profile) {
    let vendorId;
    if (profile === CONSTANT.PLACEHOLDER.ENVIRONMENT_VAR.PROFILE_NAME) {
        vendorId = process.env.ASK_VENDOR_ID;
    } else {
        let configFile = path.join(os.homedir(), '.ask', 'cli_config');
        if (!fs.existsSync(configFile)) {
            console.warn('Please make sure ~/.ask/cli_config exists.');
            return;
        }
        vendorId = jsonUtility.getProperty(configFile, ['profiles', profile, 'vendor_id']);
    }
    return vendorId;
}

function askProfileSyntaxValidation(profileName) {
    return /^[a-zA-Z0-9-_]+$/g.test(profileName);
}
'use strict';

const awsSetup = require('../utils/aws-setup');
const profileHelper = require('../utils/profile-helper');
const inquirer = require('inquirer');
const awsProfileHandler = require('aws-profile-handler');
const AWS_DISPLAY_PAGE_SIZE = 25;
const path = require('path');
const fs = require('fs');
const os = require('os');
const CONSTANT = require('../utils/constants');

module.exports = {
    resolve: resolve
};

function resolve(askProfile, callback) {
    const awsPath = path.join(os.homedir(), '.aws', 'credentials');
    try {
        let awsProfileList = fs.existsSync(awsPath) ? awsProfileHandler.listProfiles(awsPath) : [];
        _awsProfileResolver(awsProfileList, askProfile, callback);
    } catch (error) {
        callback(error);
    }
}

function _awsProfileResolver(awsProfileList, askProfile, callback) {
    if (awsProfileList.length === 0) {
        const YES = 'Yes. Set up the AWS credentials.';
        const SKIP = 'No. Skip AWS credentials association step.';
        const ENVIRONMENT_VAR = 'No. Use the AWS environment variables.';
        const ABORT =  'Abort the initialization process.';
        const awsSetupOptions = [YES, ENVIRONMENT_VAR, SKIP, ABORT];

        inquirer.prompt([
            {
                type: 'list',
                name: 'awsSetupDecision',
                message: 'There is no AWS credentials file found in .aws directory, do you want to set up the credentials right now? (for lambda function deployment)',
                choices: awsSetupOptions
            }
        ]).then((answer) => {
            if (answer.awsSetupDecision === YES) {
                awsSetup.setup((error, awsProfile) => {
                    if (error) {
                        callback(error);
                    } else {
                        profileHelper.setupProfile(awsProfile, askProfile, callback);
                    }
                });
            } else if (answer.awsSetupDecision === ENVIRONMENT_VAR) {
                profileHelper.setupProfile(CONSTANT.PLACEHOLDER.ENVIRONMENT_VAR.AWS_CREDENTIALS, askProfile, callback);
            }
            else if (answer.awsSetupDecision === SKIP) {
                console.warn('[Warn]: ' + 'Profile: "' + askProfile + '" will not be able to deploy lambda functions' +
                    ' since no AWS credentials are set up.\n');
                profileHelper.setupProfile(null, askProfile, callback);
            } else {
                console.log('You can turn to README.md for AWS credentials setup instruction.');
                return;
            }
        });
    } else {
        const SKIP_AWS_MESSAGE = 'Skip AWS credential for ask-cli.';
        const ENVIRONMENT_VAR = 'Use the AWS environment variables.';
        console.log('Setting up ask profile: [' + askProfile + ']');
        awsProfileList.push(new inquirer.Separator());
        awsProfileList.push(SKIP_AWS_MESSAGE);
        awsProfileList.push(ENVIRONMENT_VAR);
        awsProfileList.push(new inquirer.Separator());
        inquirer.prompt([{
            type: 'list',
            name: 'chosenProfile',
            message: 'Please choose one from the following AWS profiles for skill\'s Lambda function deployment.\n',
            pageSize: AWS_DISPLAY_PAGE_SIZE,
            choices: awsProfileList
        }]).then((answer) => {
            if (answer.chosenProfile === SKIP_AWS_MESSAGE) {
                console.warn('[Warn]: ' + 'Profile: "' + askProfile + '" will not able to deploy lambda functions' +
                    ' since no AWS credentials are set up.');
                profileHelper.setupProfile(null, askProfile, callback);
            } else if (answer.chosenProfile === ENVIRONMENT_VAR) {
                profileHelper.setupProfile(CONSTANT.PLACEHOLDER.ENVIRONMENT_VAR.AWS_CREDENTIALS, askProfile, callback);
            } else {
                profileHelper.setupProfile(answer.chosenProfile, askProfile, callback);
            }
        });
    }
}
